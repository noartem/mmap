{"version":3,"sources":["features/mmap/mmapSlice.ts","features/mmap/ShortcutsInfo.tsx","features/mmap/Search.tsx","features/mmap/Nav.tsx","features/mmap/code.tsx","features/mmap/Body.tsx","features/mmap/MMap.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["initialState","ls","localStorage","getItem","search","notes","currentNoteName","JSON","parse","getFromLS","mmapSlice","createSlice","name","reducers","state","searchString","payload","addNote","noteName","undefined","find","note","alert","push","body","selectNote","updateNote","newNote","deleteNote","filter","actions","selectMMap","mmap","selectSearchingNotes","includes","selectCurrentNote","ShortcutsInfo","className","connector","connect","dispatch","goSearch","searchInput","useRef","useShortcuts","ref","placeholder","value","onChange","e","focusable","disabled","onClick","useShcut","i","String","useNoteShortcuts","title","key","Code","children","language","style","closeNote","useState","bodyInput","notEditing","editingBody","editNote","setEditingName","setEditingBody","saveNote","tryDeleteNote","window","unstable_system","palette","id","options","overrides","code","component","as","MMap","useSelector","App","store","configureStore","reducer","mmapReducer","subscribe","setItem","stringify","getState","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","system","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.58f4bc69.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../../app/store\";\nimport { Note } from \"./note\";\n\ninterface MMapState {\n  search: string;\n  notes: Array<Note>;\n  currentNoteName: string;\n}\n\nconst getFromLS = () => {\n  const ls = localStorage.getItem(\"mmap-store\");\n  return ls === \"\" || ls === null\n    ? {\n        search: \"\",\n        notes: [],\n        currentNoteName: \"\",\n      }\n    : JSON.parse(ls);\n};\n\nconst initialState: MMapState = getFromLS();\n\nexport const mmapSlice = createSlice({\n  name: \"mmap\",\n  initialState,\n  reducers: {\n    search: (state, searchString: PayloadAction<string>) => {\n      state.search = searchString.payload;\n    },\n    addNote: (state, noteName: PayloadAction<string>) => {\n      if (\n        state.notes.find((note) => note.name === noteName.payload) !== undefined\n      ) {\n        alert(\"Note with this name already exist!\");\n      } else {\n        state.notes.push({\n          name: noteName.payload,\n          body: `# ${noteName.payload}!\\n\\nSome *text* goes here...`,\n        });\n        state.search = \"\";\n      }\n    },\n    selectNote: (state, noteName: PayloadAction<string>) => {\n      state.currentNoteName = noteName.payload;\n    },\n    updateNote: (state, newNote: PayloadAction<Note>) => {\n      for (const note of state.notes) {\n        if (note.name === state.currentNoteName) {\n          note.name = newNote.payload.name;\n          note.body = newNote.payload.body;\n          state.currentNoteName = note.name;\n          break;\n        }\n      }\n    },\n    deleteNote: (state) => {\n      state.notes = state.notes.filter(\n        (note) => note.name !== state.currentNoteName\n      );\n      state.currentNoteName = \"\";\n    },\n  },\n});\n\nexport const {\n  search,\n  addNote,\n  selectNote,\n  updateNote,\n  deleteNote,\n} = mmapSlice.actions;\n\nexport const selectMMap = (state: RootState) => state.mmap;\n\nexport const selectSearchingNotes = (state: RootState) =>\n  state.mmap.notes.filter((note) => note.name.includes(state.mmap.search));\n\nexport const selectCurrentNote = (state: RootState) =>\n  state.mmap.notes.find((note) => note.name === state.mmap.currentNoteName);\n\nexport default mmapSlice.reducer;\n","import React from \"react\";\nimport { css } from \"linaria\";\n\nconst styleClass = css`\n  width: 100%;\n\n  p {\n    padding: 1em 1.5em;\n  }\n`;\n\nexport default function ShortcutsInfo() {\n  return (\n    <div className={styleClass}>\n      <p>\n        <b> Alt + S</b> focus search input\n      </p>\n      <p>\n        <b> Control + Alt + $number</b> open <i>$number</i> note\n      </p>\n      <p>\n        <b> Ctrl + B</b> toggle edit mode\n      </p>\n      <p>\n        <b> Alt + I </b> delete note\n      </p>\n      <p>\n        <b> Escape </b> close note\n      </p>\n    </div>\n  );\n}\n","import React, { useRef } from \"react\";\nimport { connect, ConnectedProps } from \"react-redux\";\nimport { Button } from \"reakit/Button\";\nimport { Input } from \"reakit/Input\";\nimport { css } from \"linaria\";\nimport { useShortcuts } from \"react-shortcuts-hook\";\n\nimport { RootState } from \"../../app/store\";\nimport { search as goSearch, addNote, selectMMap } from \"./mmapSlice\";\n\nconst styleClass = css`\n  display: flex;\n  padding: 0.5em 0.75em;\n  height: 2.4em;\n\n  input {\n    border: none;\n    margin: 0 0.5em 0 0 !important;\n  }\n`;\n\nfunction Search({ search, goSearch, addNote }: IProps) {\n  const searchInput = useRef<HTMLInputElement>(null);\n\n  useShortcuts([\"alt\", \"S\"], () => searchInput.current?.focus(), [searchInput]);\n\n  return (\n    <header className={styleClass}>\n      <Input\n        ref={searchInput}\n        name=\"search\"\n        placeholder=\"Search... (Alt + S to focus)\"\n        value={search}\n        onChange={(e) => goSearch(e.target.value)}\n      />\n      <Button\n        focusable\n        disabled={search === \"\"}\n        onClick={() => addNote(search)}\n      >\n        Add\n      </Button>\n    </header>\n  );\n}\n\nconst connector = connect(\n  (state: RootState) => ({ search: selectMMap(state).search }),\n  (dispatch) => ({\n    goSearch: (query: string) => dispatch(goSearch(query)),\n    addNote: (query: string) => dispatch(addNote(query)),\n  })\n);\n\ntype IProps = ConnectedProps<typeof connector>;\n\nexport default connector(Search);\n","import React from \"react\";\nimport { connect, ConnectedProps } from \"react-redux\";\nimport { css } from \"linaria\";\nimport { Clickable } from \"reakit/Clickable\";\nimport { useShortcuts } from \"react-shortcuts-hook\";\n\nimport { RootState } from \"../../app/store\";\nimport { selectSearchingNotes, selectNote } from \"./mmapSlice\";\n\nconst styleClass = css`\n  width: 32%;\n  border-right: 1px solid rgba(0, 0, 0, 0.25);\n  overflow-y: auto;\n  background: #f8f9fa !important;\n\n  ul {\n    margin: 0;\n    padding: 0;\n\n    li {\n      list-style: none;\n\n      button {\n        padding: 0.5em 0.75em;\n        overflow: hidden;\n        text-overflow: ellipsis;\n        border: none;\n        background: inherit;\n        width: 100%;\n        text-align: left;\n        cursor: pointer;\n        font-size: 16px;\n\n        transition: 0.4s;\n\n        &:focus,\n        &:hover,\n        &:active {\n          background: #006dff;\n          color: white;\n        }\n      }\n    }\n  }\n`;\n\nfunction useNoteShortcuts({ notes, selectNote }: IProps) {\n  const useShcut = (i: number) =>\n    useShortcuts(\n      [\"control\", \"alt\", String(i + 1)],\n      () => (i >= notes.length ? null : selectNote(notes[i].name)),\n      [notes]\n    );\n\n  useShcut(0);\n  useShcut(1);\n  useShcut(2);\n  useShcut(3);\n  useShcut(4);\n  useShcut(5);\n  useShcut(6);\n  useShcut(7);\n  useShcut(8);\n  useShcut(9);\n}\n\nfunction Nav({ notes, selectNote }: IProps) {\n  useNoteShortcuts({ notes, selectNote });\n\n  return (\n    <div className={styleClass}>\n      <ul>\n        {notes.map((note) => (\n          <li title={note.name} key={note.name}>\n            <Clickable onClick={() => selectNote(note.name)}>\n              {note.name}\n            </Clickable>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nconst connector = connect(\n  (state: RootState) => ({ notes: selectSearchingNotes(state) }),\n  (dispatch) => ({\n    selectNote: (name: string) => dispatch(selectNote(name)),\n  })\n);\n\ntype IProps = ConnectedProps<typeof connector>;\n\nexport default connector(Nav);\n","import React from \"react\";\nimport { css } from \"linaria\";\n\nimport { PrismAsyncLight as SyntaxHighlighter } from \"react-syntax-highlighter\";\nimport { ghcolors as theme } from \"react-syntax-highlighter/dist/esm/styles/prism\";\n\ninterface IProps {\n  className: string;\n  children: React.ReactChildren;\n}\n\nconst stylesClass = css`\n  padding: 0;\n  font-size: 1.5em;\n  line-height: 1.5;\n  background: none;\n  border: none;\n`;\n\nexport const Code = ({ className, children }: IProps) => (\n  <SyntaxHighlighter\n    className={stylesClass}\n    language={\n      className === \"\" || className === undefined ? \"\" : className.split(\"-\")[1]\n    }\n    style={theme}\n    children={children}\n  />\n);\n","import React, { useState, useRef, Fragment } from \"react\";\nimport { connect, ConnectedProps } from \"react-redux\";\nimport { css } from \"linaria\";\nimport Markdown from \"markdown-to-jsx\";\nimport { Button } from \"reakit/Button\";\nimport { Input } from \"reakit/Input\";\nimport { useShortcuts } from \"react-shortcuts-hook\";\n\nimport { updateNote, deleteNote, selectNote } from \"./mmapSlice\";\nimport { Note } from \"./note\";\nimport { Code } from \"./code\";\n\nconst stylesClass = css`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n\n  textarea {\n    width: 100%;\n    height: 100%;\n    border: none;\n  }\n\n  #body_content {\n    overflow: auto;\n  }\n\n  #body_content,\n  textarea,\n  nav {\n    padding: 0.5em 0.75em;\n  }\n\n  nav {\n    border-bottom: 1px solid rgba(0, 0, 0, 0.25);\n    display: flex;\n\n    h1 {\n      margin: auto 0;\n    }\n\n    .controls {\n      margin-left: auto;\n      display: flex;\n\n      button {\n        margin-left: 0.5em;\n      }\n    }\n  }\n`;\n\nfunction Body({ note, updateNote, deleteNote, closeNote }: IProps) {\n  const [editingBody, setEditingBody] = useState(\"\");\n  const [editingName, setEditingName] = useState(\"\");\n  const bodyInput = useRef<HTMLTextAreaElement>(null);\n\n  const notEditing = editingBody === \"\";\n\n  const editNote = () => {\n    setEditingName(note.name);\n    setEditingBody(note.body);\n    bodyInput.current?.focus();\n  };\n\n  const saveNote = () => {\n    updateNote({ name: editingName, body: editingBody });\n    setEditingName(\"\");\n    setEditingBody(\"\");\n  };\n\n  const tryDeleteNote = () => {\n    if (window.confirm(\"Are you sure?\")) deleteNote();\n  };\n\n  useShortcuts([\"control\", \"B\"], () => (notEditing ? editNote() : saveNote()), [\n    note,\n    editingName,\n    editingBody,\n    bodyInput,\n  ]);\n\n  useShortcuts([\"alt\", \"I\"], tryDeleteNote, []);\n\n  useShortcuts([\"Escape\"], () => closeNote(), []);\n\n  return (\n    <main className={stylesClass}>\n      <nav>\n        {notEditing ? (\n          <h1>{note.name}</h1>\n        ) : (\n          <Input\n            value={editingName}\n            onChange={(e) => setEditingName(e.target.value)}\n          />\n        )}\n\n        <div className=\"controls\">\n          {notEditing ? (\n            <Fragment>\n              <Button onClick={editNote}>Edit</Button>\n              <Button\n                onClick={tryDeleteNote}\n                unstable_system={{ palette: \"danger\" }}\n              >\n                Delete\n              </Button>\n            </Fragment>\n          ) : (\n            <Button onClick={saveNote}>Save</Button>\n          )}\n        </div>\n      </nav>\n      {notEditing ? (\n        <div id=\"body_content\" className=\"markdown-body\">\n          <Markdown\n            children={note.body}\n            options={{\n              overrides: {\n                code: {\n                  component: Code,\n                },\n              },\n            }}\n          />\n        </div>\n      ) : (\n        <Input\n          name=\"body\"\n          placeholder=\"Some note body..\"\n          ref={bodyInput}\n          value={editingBody}\n          as=\"textarea\"\n          // @ts-ignore\n          onChange={(e) => setEditingBody(e.target.value)}\n        />\n      )}\n    </main>\n  );\n}\n\nconst connector = connect(null, (dispatch) => ({\n  updateNote: (note: Note) => dispatch(updateNote(note)),\n  deleteNote: () => dispatch(deleteNote()),\n  closeNote: () => dispatch(selectNote(\"\")),\n}));\n\ninterface IProps extends ConnectedProps<typeof connector> {\n  note: Note;\n}\n\nexport default connector(Body);\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { css } from \"linaria\";\n\nimport { selectCurrentNote } from \"./mmapSlice\";\nimport ShortcutsInfo from \"./ShortcutsInfo\";\nimport Search from \"./Search\";\nimport Nav from \"./Nav\";\nimport Body from \"./Body\";\n\nconst stylesClass = css`\n  display: flex;\n  height: calc(100vh - 3.44em);\n  width: 100%;\n  border-top: 1px solid rgba(0, 0, 0, 0.25);\n`;\n\nexport function MMap() {\n  const note = useSelector(selectCurrentNote);\n\n  return (\n    <section>\n      <Search />\n      <div className={stylesClass}>\n        <Nav />\n        {note ? <Body note={note} /> : <ShortcutsInfo />}\n      </div>\n    </section>\n  );\n}\n","import React from \"react\";\r\nimport { MMap } from \"./features/mmap/MMap\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <MMap />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore, ThunkAction, Action } from \"@reduxjs/toolkit\";\r\nimport mmapReducer from \"../features/mmap/mmapSlice\";\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    mmap: mmapReducer,\r\n  },\r\n});\r\n\r\nstore.subscribe(() =>\r\n  localStorage.setItem(\"mmap-store\", JSON.stringify(store.getState().mmap))\r\n);\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport { store } from \"./app/store\";\r\nimport { Provider as ReduxProvider } from \"react-redux\";\r\nimport { Provider as ReakitProvider } from \"reakit\";\r\nimport * as system from \"reakit-system-bootstrap\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ReduxProvider store={store}>\r\n      <ReakitProvider unstable_system={system}>\r\n        <App />\r\n      </ReakitProvider>\r\n    </ReduxProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}