{"version":3,"sources":["../node_modules/refractor/lang/phpdoc.js","../node_modules/refractor/lang/javadoclike.js"],"names":["refractorJavadoclike","require","phpdoc","Prism","register","typeExpression","source","languages","extend","parameter","pattern","RegExp","lookbehind","insertBefore","inside","keyword","punctuation","javadoclike","addSupport","module","exports","displayName","aliases","javaDocLike","Object","defineProperty","value","docLanguage","forEach","lang","callback","grammar","token","definition","alias","Array","isArray","i","l","length","docCommentSupport","rest"],"mappings":"mGACA,IAAIA,EAAuBC,EAAQ,IAInC,SAASC,EAAOC,GACdA,EAAMC,SAASJ,GACd,SAAWG,GACV,IAAIE,EAAiB,8BAA8BC,OACnDH,EAAMI,UAAUL,OAASC,EAAMI,UAAUC,OAAO,cAAe,CAC7DC,UAAW,CACTC,QAASC,OACP,0DACEN,EACA,kBAEJO,YAAY,KAGhBT,EAAMI,UAAUM,aAAa,SAAU,UAAW,CAChD,aAAc,CACZ,CACEH,QAASC,OACP,yFACEN,GAEJO,YAAY,EACZE,OAAQ,CACNC,QAAS,sHACTC,YAAa,kBAKrBb,EAAMI,UAAUU,YAAYC,WAAW,MAAOf,EAAMI,UAAUL,QA3B/D,CA4BEC,GAjCLgB,EAAOC,QAAUlB,EACjBA,EAAOmB,YAAc,SACrBnB,EAAOoB,QAAU,I,gCCCjB,SAASL,EAAYd,IAClB,SAAWA,GACV,IAAIoB,EAAepB,EAAMI,UAAUU,YAAc,CAC/CR,UAAW,CACTC,QAAS,8DACTE,YAAY,GAEdG,QAAS,CAGPL,QAAS,qDACTE,YAAY,GAEdI,YAAa,QAgEfQ,OAAOC,eAAeF,EAAa,aAAc,CAC/CG,MAdF,SAAoBnB,EAAWoB,GACJ,kBAAdpB,IACTA,EAAY,CAACA,IAEfA,EAAUqB,SAAQ,SAAUC,IA/C9B,SAA2BA,EAAMC,GAC/B,IACIC,EAAU5B,EAAMI,UAAUsB,GAC9B,GAAKE,EAAL,CAGA,IAAIC,EAAQD,EALI,eAMhB,IAAKC,EAAO,CAEV,IAAIC,EAAa,CACjBA,cAAwB,CACtBvB,QAAS,wCACTE,YAAY,EACZsB,MAAO,YAGTF,GADAD,EAAU5B,EAAMI,UAAUM,aAAagB,EAAM,UAAWI,IAd1C,eAuBhB,GANID,aAAiBrB,SAEnBqB,EAAQD,EAnBM,eAmBe,CAC3BrB,QAASsB,IAGTG,MAAMC,QAAQJ,GAChB,IAAK,IAAIK,EAAI,EAAGC,EAAIN,EAAMO,OAAQF,EAAIC,EAAGD,IACnCL,EAAMK,aAAc1B,SACtBqB,EAAMK,GAAK,CACT3B,QAASsB,EAAMK,KAGnBP,EAASE,EAAMK,SAGjBP,EAASE,IAcTQ,CAAkBX,GAAM,SAAUnB,GAC3BA,EAAQI,SACXJ,EAAQI,OAAS,IAEnBJ,EAAQI,OAAO2B,KAAOd,WAO5BJ,EAAYL,WAAW,CAAC,OAAQ,aAAc,OAAQK,GA/EvD,CAgFEpB,GApFLgB,EAAOC,QAAUH,EACjBA,EAAYI,YAAc,cAC1BJ,EAAYK,QAAU","file":"static/js/react-syntax-highlighter_languages_refractor_phpdoc.be2a2638.chunk.js","sourcesContent":["'use strict'\nvar refractorJavadoclike = require('./javadoclike.js')\nmodule.exports = phpdoc\nphpdoc.displayName = 'phpdoc'\nphpdoc.aliases = []\nfunction phpdoc(Prism) {\n  Prism.register(refractorJavadoclike)\n  ;(function (Prism) {\n    var typeExpression = /(?:\\b[a-zA-Z]\\w*|[|\\\\[\\]])+/.source\n    Prism.languages.phpdoc = Prism.languages.extend('javadoclike', {\n      parameter: {\n        pattern: RegExp(\n          '(@(?:global|param|property(?:-read|-write)?|var)\\\\s+(?:' +\n            typeExpression +\n            '\\\\s+)?)\\\\$\\\\w+'\n        ),\n        lookbehind: true\n      }\n    })\n    Prism.languages.insertBefore('phpdoc', 'keyword', {\n      'class-name': [\n        {\n          pattern: RegExp(\n            '(@(?:global|package|param|property(?:-read|-write)?|return|subpackage|throws|var)\\\\s+)' +\n              typeExpression\n          ),\n          lookbehind: true,\n          inside: {\n            keyword: /\\b(?:callback|resource|boolean|integer|double|object|string|array|false|float|mixed|bool|null|self|true|void|int)\\b/,\n            punctuation: /[|\\\\[\\]()]/\n          }\n        }\n      ]\n    })\n    Prism.languages.javadoclike.addSupport('php', Prism.languages.phpdoc)\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = javadoclike\njavadoclike.displayName = 'javadoclike'\njavadoclike.aliases = []\nfunction javadoclike(Prism) {\n  ;(function (Prism) {\n    var javaDocLike = (Prism.languages.javadoclike = {\n      parameter: {\n        pattern: /(^\\s*(?:\\/{3}|\\*|\\/\\*\\*)\\s*@(?:param|arg|arguments)\\s+)\\w+/m,\n        lookbehind: true\n      },\n      keyword: {\n        // keywords are the first word in a line preceded be an `@` or surrounded by curly braces.\n        // @word, {@word}\n        pattern: /(^\\s*(?:\\/{3}|\\*|\\/\\*\\*)\\s*|\\{)@[a-z][a-zA-Z-]+\\b/m,\n        lookbehind: true\n      },\n      punctuation: /[{}]/\n    })\n    /**\n     * Adds doc comment support to the given language and calls a given callback on each doc comment pattern.\n     *\n     * @param {string} lang the language add doc comment support to.\n     * @param {(pattern: {inside: {rest: undefined}}) => void} callback the function called with each doc comment pattern as argument.\n     */\n    function docCommentSupport(lang, callback) {\n      var tokenName = 'doc-comment'\n      var grammar = Prism.languages[lang]\n      if (!grammar) {\n        return\n      }\n      var token = grammar[tokenName]\n      if (!token) {\n        // add doc comment: /** */\n        var definition = {}\n        definition[tokenName] = {\n          pattern: /(^|[^\\\\])\\/\\*\\*[^/][\\s\\S]*?(?:\\*\\/|$)/,\n          lookbehind: true,\n          alias: 'comment'\n        }\n        grammar = Prism.languages.insertBefore(lang, 'comment', definition)\n        token = grammar[tokenName]\n      }\n      if (token instanceof RegExp) {\n        // convert regex to object\n        token = grammar[tokenName] = {\n          pattern: token\n        }\n      }\n      if (Array.isArray(token)) {\n        for (var i = 0, l = token.length; i < l; i++) {\n          if (token[i] instanceof RegExp) {\n            token[i] = {\n              pattern: token[i]\n            }\n          }\n          callback(token[i])\n        }\n      } else {\n        callback(token)\n      }\n    }\n    /**\n     * Adds doc-comment support to the given languages for the given documentation language.\n     *\n     * @param {string[]|string} languages\n     * @param {Object} docLanguage\n     */\n    function addSupport(languages, docLanguage) {\n      if (typeof languages === 'string') {\n        languages = [languages]\n      }\n      languages.forEach(function (lang) {\n        docCommentSupport(lang, function (pattern) {\n          if (!pattern.inside) {\n            pattern.inside = {}\n          }\n          pattern.inside.rest = docLanguage\n        })\n      })\n    }\n    Object.defineProperty(javaDocLike, 'addSupport', {\n      value: addSupport\n    })\n    javaDocLike.addSupport(['java', 'javascript', 'php'], javaDocLike)\n  })(Prism)\n}\n"],"sourceRoot":""}