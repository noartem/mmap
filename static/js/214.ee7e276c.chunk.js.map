{"version":3,"sources":["features/notes/ShortcutsInfo.tsx","features/notes/Search.tsx","features/notes/Nav.tsx","features/notes/code.tsx","features/notes/Body.tsx","features/notes/Notes.tsx"],"names":["ShortcutsInfo","className","addNote","searchInput","useRef","add","a","setQuery","useShortcut","ref","name","placeholder","value","onChange","e","focusable","disabled","query","onClick","Links","NavLink","notes","useSelector","selectSearchingNotes","push","useHistory","useShcut","i","String","url","useNoteShortcuts","note","title","key","component","to","Code","children","language","style","noteId","useParams","selectNote","dispatch","useDispatch","useState","bodyInput","notEditing","editingBody","editNote","setEditingName","setEditingBody","saveNote","updateNote","id","body","tryDeleteNote","window","deleteNote","closeNote","unstable_system","palette","options","overrides","code","as","useRouteMatch","goAddNote","exact","path"],"mappings":"yTASe,SAASA,IACtB,OACE,yBAAKC,UART,YASM,2BACE,uCADF,uBAGA,2BACE,uDADF,SACuC,sCADvC,SAGA,2BACE,wCADF,qBAGA,2BACE,wCADF,gBAGA,2BACE,uCADF,gB,qCC4BN,MA1BA,SAAgB,GAAuC,IAAvC,EAAsC,EAAtC,QAAsC,EAAtC,SAAmBC,EAAmB,EAAnBA,QAC3BC,EAAcC,iBAApB,MAEMC,EAAG,uCAAG,sBAAAC,EAAA,sEACJJ,EAAN,GADU,OAEVK,MAFU,2CAAH,qDAOT,OAFAC,YAAY,SAAS,kCAAML,iBAAN,aAAMA,EAAhB,UAA8C,CAAzDK,IAGE,4BAAQP,UA9BZ,YA+BM,uBACEQ,IADF,EAEEC,KAFF,SAGEC,YAHF,+BAIEC,MAJF,EAKEC,SAAWC,YAAD,OAAOP,EAASO,SAL5B,UAOA,uBAAQC,WAAR,EAAkBC,SAAlB,KAA4BC,EAAcC,QAA1C,Y,0BCpCAC,EAAK,wDAiBLC,EAAO,wDAoEb,MApBA,SAAa,GAAyB,IAAzB,EAAwB,EAAxB,IAAOH,EAAiB,EAAjBA,MACZI,EAAQC,YAAYC,YAA1B,IAIA,OAjCF,SAA0B,GAAyB,IAAzB,EAAwB,EAAxB,IAAON,EAAiB,EAAjBA,MACzBI,EAAQC,YAAYC,YAA1B,IACQC,EAASC,cAATD,KAEFE,EAAW,SAACC,GAAD,OACfnB,YAAY,YAAD,OACGoB,OAAOD,EADV,KAET,kBAAOA,GAAKN,EAALM,YAA2BH,EAAK,GAAD,OAAIK,EAAJ,YAAWR,KAFxC,OAGT,CAACA,EAJL,KAOAK,KACAA,KACAA,KACAA,KACAA,KACAA,KACAA,KACAA,KACAA,KACAA,KAWAI,CAAiB,CAAED,MAAKZ,UAGtB,6BACE,yBACGI,OAAWU,YAAD,OACT,wBAAIC,MAAOD,EAAX,KAAsBE,IAAKF,EAA3B,IACE,uBAAMG,UAAN,EAA0BC,GAAA,UAAON,EAAP,YAAcE,EAAxC,KACGA,EAAD,a,sCClEDK,EAAO,SAAC,GAAD,IAAC,EAAD,EAAC,UAAaC,EAAd,EAAcA,SAAd,OAClB,uBACEpC,UAVJ,UAWIqC,SACErC,iBAAoBA,EAApBA,GAAmDA,aAHvD,GAKEsC,MALF,IAMEF,SAPG,K,OCoJP,MA3GA,WAAiB,IACPG,EAAWC,cAAXD,OACFT,EAAOT,YAAYoB,YAAzB,IAEQlB,EAASC,cAATD,KACFmB,EAAWC,cALH,EAOwBC,mBAAtC,IAPc,mBAOR,EAPQ,KAOR,EAPQ,OAQwBA,mBAAtC,IARc,mBAQR,EARQ,KAQR,EARQ,KASRC,EAAY1C,iBAAlB,MAEM2C,EAAN,KAAmBC,EAEbC,EAAW,WAAO,IAAD,EACrB,IAEAC,EAAenB,EAAfmB,MACAC,EAAepB,EAAfoB,MACAL,8CAGIM,EAAW,WACf,IAEAT,EAASU,YAAW,CAAEC,GAAIvB,EAAN,GAAerB,KAAf,EAAkC6C,KAAMP,KAC5DE,MACAC,QAGIK,EAAgB,WAChBzB,GAAQ0B,eAAZ,kBAA6Cd,EAASe,YAAW3B,EAApBY,MAGzCgB,EAAY,kBAAMnC,EAAxB,WAaA,OAXAhB,YAAY,UAAU,kBAAOuC,EAAaE,IAAaG,MAAa,CAAC,EAAD,IAApE5C,IAOAA,YAAY,QAAQ,EAApBA,IAEAA,YAAY,SAAS,EAArBA,IAEA,EAME,yBAAKP,UAnGT,WAoGM,6BACG8C,EACC,wBAAIf,MAAOD,EAAX,MAAuBA,EADd,MAGT,uBACEnB,MADF,EAEEC,SAAWC,YAAD,OAAOoC,EAAepC,SALpC,UASA,yBAAKb,UAAL,YACG8C,EACC,kCACE,uBAAQ7B,QAAR,WACA,uBACEA,QADF,EAEE0C,gBAAiB,CAAEC,QAAS,WAF9B,WAQF,uBAAQ3C,QAXV,GAWE,UAIL6B,EACC,yBAAKO,GAAL,eAAuBrD,UAAvB,iBACE,uBACEoC,SAAUN,EADZ,KAEE+B,QAAS,CACPC,UAAW,CACTC,KAAM,CACJ9B,UAAWE,QAOrB,uBACE1B,KADF,OAEEC,YAFF,mBAGEF,IAHF,EAIEG,MAJF,EAKEqD,GALF,WAOEpD,SAAWC,YAAD,OAAOqC,EAAerC,SArBpC,YAhCF6C,IACA,+C,OCtCJ,UAnCA,WAAkB,IAAD,EACWd,mBAA1B,IADe,mBACT,EADS,KACT,EADS,OAEOqB,cAAhB,EAFS,EAET,KAAQrC,EAFC,EAEDA,IACRc,EAAWC,cAEXuB,EAAS,uCAAG,uBAAA7D,EAAA,sEACVqC,EAASzC,YAAf,IADgB,OAEhBK,MAFgB,2CAAH,sDAKf,OACE,6BAASN,UAnCb,YAoCM,yBAAKA,UAAL,QACE,qBACEgB,MADF,EAEEV,SAAWO,YAAD,OAAOP,EAFnB,IAGEL,QAHF,IAKA,qBAAK2B,IAAL,EAAeZ,MAAf,KAGF,yBAAKhB,UAAL,SACE,2BACE,uBAAOmE,OAAP,EAAaC,KAAb,GACE,2BAEF,uBAAOA,KAAA,UAAP,EAAO,aACL,+B","file":"static/js/214.ee7e276c.chunk.js","sourcesContent":["import React from \"react\";\nimport { css } from \"linaria\";\n\nconst styleClass = css`\n  p {\n    padding: 1em 1.5em;\n  }\n`;\n\nexport default function ShortcutsInfo() {\n  return (\n    <div className={styleClass}>\n      <p>\n        <b> Alt + S</b> focus search input\n      </p>\n      <p>\n        <b> Control + Alt + $number</b> open <i>$number</i> note\n      </p>\n      <p>\n        <b> Ctrl + B</b> toggle edit mode\n      </p>\n      <p>\n        <b> Alt + I </b> delete note\n      </p>\n      <p>\n        <b> Escape </b> close note\n      </p>\n    </div>\n  );\n}\n","import React, { useRef } from \"react\";\nimport { Button } from \"reakit/Button\";\nimport { Input } from \"reakit/Input\";\nimport { css } from \"linaria\";\n\nimport { useShortcut } from \"../../utils\";\n\nconst styleClass = css`\n  display: flex;\n  padding: 0.5em 0.75em;\n  height: 2.4em;\n\n  border-bottom: 1px solid #006dff;\n\n  input {\n    border: none;\n    margin: 0 0.5em 0 0 !important;\n  }\n`;\n\ninterface IProps {\n  query: string;\n  setQuery: (query: string) => void;\n  addNote: (query: string) => void;\n}\n\nfunction Search({ query, setQuery, addNote }: IProps) {\n  const searchInput = useRef<HTMLInputElement>(null);\n\n  const add = async () => {\n    await addNote(query);\n    setQuery(\"\");\n  };\n\n  useShortcut(\"alt+s\", () => searchInput.current?.focus(), [searchInput]);\n\n  return (\n    <header className={styleClass}>\n      <Input\n        ref={searchInput}\n        name=\"search\"\n        placeholder=\"Search... (Alt + S to focus)\"\n        value={query}\n        onChange={(e) => setQuery(e.target.value)}\n      />\n      <Button focusable disabled={query === \"\"} onClick={add}>\n        Add\n      </Button>\n    </header>\n  );\n}\n\nexport default Search;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { styled } from \"linaria/react\";\nimport { Link, useHistory } from \"react-router-dom\";\n\nimport { useShortcut } from \"../../utils\";\n\nimport { selectSearchingNotes } from \"./notesSlice\";\n\nconst Links = styled.ul`\n  width: 100%;\n  overflow-y: auto;\n  overflow-x: hidden;\n\n  @media (min-width: 992px) {\n    height: calc(100vh - 6.07em);\n  }\n\n  margin: 0;\n  padding: 0;\n\n  li {\n    list-style: none;\n  }\n`;\n\nconst NavLink = styled.a`\n  display: block;\n  padding: 0.5em 0.75em;\n\n  overflow: hidden;\n  text-overflow: ellipsis;\n  font-size: 18px;\n  text-decoration: none;\n  text-align: left;\n  color: inherit;\n  transition: 0.1s;\n\n  &:focus,\n  &:hover,\n  &:active {\n    background: #006dff;\n    color: white;\n  }\n`;\n\nfunction useNoteShortcuts({ url, query }: IProps) {\n  const notes = useSelector(selectSearchingNotes(query));\n  const { push } = useHistory();\n\n  const useShcut = (i: number) =>\n    useShortcut(\n      `ctrl+alt+${String(i + 1)}`,\n      () => (i >= notes.length ? null : push(`${url}/${notes[i].id}`)),\n      [notes, push]\n    );\n\n  useShcut(0);\n  useShcut(1);\n  useShcut(2);\n  useShcut(3);\n  useShcut(4);\n  useShcut(5);\n  useShcut(6);\n  useShcut(7);\n  useShcut(8);\n  useShcut(9);\n}\n\ninterface IProps {\n  url: string;\n  query: string;\n}\n\nfunction Nav({ url, query }: IProps) {\n  const notes = useSelector(selectSearchingNotes(query));\n\n  useNoteShortcuts({ url, query });\n\n  return (\n    <div>\n      <Links>\n        {notes.map((note) => (\n          <li title={note.name} key={note.id}>\n            <Link component={NavLink} to={`${url}/${note.id}`}>\n              {note.name}\n            </Link>\n          </li>\n        ))}\n      </Links>\n    </div>\n  );\n}\n\nexport default Nav;\n","import React from \"react\";\nimport { css } from \"linaria\";\n\nimport { PrismAsyncLight as SyntaxHighlighter } from \"react-syntax-highlighter\";\nimport { ghcolors as theme } from \"react-syntax-highlighter/dist/esm/styles/prism\";\n\ninterface IProps {\n  className: string;\n  children: React.ReactChildren;\n}\n\nconst stylesClass = css`\n  padding: 0;\n  font-size: 1.5em;\n  line-height: 1.5;\n  background: none;\n  border: none;\n`;\n\nexport const Code = ({ className, children }: IProps) => (\n  <SyntaxHighlighter\n    className={stylesClass}\n    language={\n      className === \"\" || className === undefined ? \"\" : className.split(\"-\")[1]\n    }\n    style={theme}\n    children={children}\n  />\n);\n","import React, { useState, useRef, Fragment } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { css } from \"linaria\";\nimport Markdown from \"markdown-to-jsx\";\nimport { Button } from \"reakit/Button\";\nimport { Input } from \"reakit/Input\";\nimport { useParams, useHistory } from \"react-router-dom\";\n\nimport { useShortcut } from \"../../utils\";\n\nimport { selectNote, updateNote, deleteNote } from \"./notesSlice\";\nimport { Code } from \"./code\";\n\nconst stylesClass = css`\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n\n  textarea {\n    width: 100%;\n    height: 100%;\n    border: none;\n  }\n\n  #body_content {\n    overflow: auto;\n  }\n\n  #body_content,\n  textarea,\n  nav {\n    padding: 0.5em 0.75em;\n  }\n\n  nav {\n    top: 0;\n    position: sticky;\n\n    background: #fff;\n    border-bottom: 1px solid #006dff;\n\n    display: flex;\n\n    h1 {\n      overflow: hidden;\n      text-overflow: ellipsis;\n      margin: auto 0;\n    }\n\n    .controls {\n      margin-left: auto;\n      display: flex;\n\n      button {\n        margin-left: 0.5em;\n      }\n    }\n  }\n`;\n\nfunction Body() {\n  const { noteId } = useParams<{ noteId: string }>();\n  const note = useSelector(selectNote(noteId));\n\n  const { push } = useHistory();\n  const dispatch = useDispatch();\n\n  const [editingBody, setEditingBody] = useState(\"\");\n  const [editingName, setEditingName] = useState(\"\");\n  const bodyInput = useRef<HTMLTextAreaElement>(null);\n\n  const notEditing = editingBody === \"\";\n\n  const editNote = () => {\n    if (!note) return;\n\n    setEditingName(note.name);\n    setEditingBody(note.body);\n    bodyInput.current?.focus();\n  };\n\n  const saveNote = () => {\n    if (!note) return;\n\n    dispatch(updateNote({ id: note.id, name: editingName, body: editingBody }));\n    setEditingName(\"\");\n    setEditingBody(\"\");\n  };\n\n  const tryDeleteNote = () => {\n    if (note && window.confirm(\"Are you sure?\")) dispatch(deleteNote(note.id));\n  };\n\n  const closeNote = () => push(\"/notes\");\n\n  useShortcut(\"ctrl+b\", () => (notEditing ? editNote() : saveNote()), [\n    note,\n    editingName,\n    editingBody,\n    bodyInput,\n  ]);\n\n  useShortcut(\"alt+i\", tryDeleteNote, []);\n\n  useShortcut(\"escape\", closeNote, []);\n\n  if (!note) {\n    closeNote();\n    return <p>Redirecting...</p>;\n  }\n\n  return (\n    <div className={stylesClass}>\n      <nav>\n        {notEditing ? (\n          <h1 title={note.name}>{note.name}</h1>\n        ) : (\n          <Input\n            value={editingName}\n            onChange={(e) => setEditingName(e.target.value)}\n          />\n        )}\n\n        <div className=\"controls\">\n          {notEditing ? (\n            <Fragment>\n              <Button onClick={editNote}>Edit</Button>\n              <Button\n                onClick={tryDeleteNote}\n                unstable_system={{ palette: \"danger\" }}\n              >\n                Delete\n              </Button>\n            </Fragment>\n          ) : (\n            <Button onClick={saveNote}>Save</Button>\n          )}\n        </div>\n      </nav>\n      {notEditing ? (\n        <div id=\"body_content\" className=\"markdown-body\">\n          <Markdown\n            children={note.body}\n            options={{\n              overrides: {\n                code: {\n                  component: Code,\n                },\n              },\n            }}\n          />\n        </div>\n      ) : (\n        <Input\n          name=\"body\"\n          placeholder=\"Some note body..\"\n          ref={bodyInput}\n          value={editingBody}\n          as=\"textarea\"\n          // @ts-ignore\n          onChange={(e) => setEditingBody(e.target.value)}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default Body;\n","import React, { useState } from \"react\";\nimport { css } from \"linaria\";\nimport { useDispatch } from \"react-redux\";\nimport { Switch, Route, useRouteMatch } from \"react-router-dom\";\n\nimport { addNote } from \"./notesSlice\";\nimport ShortcutsInfo from \"./ShortcutsInfo\";\nimport Search from \"./Search\";\nimport Nav from \"./Nav\";\nimport Body from \"./Body\";\n\nconst stylesClass = css`\n  @media (min-width: 992px) {\n    display: flex;\n\n    .left {\n      width: 32%;\n      border-right: 1px solid #006dff;\n      overflow-y: auto;\n    }\n\n    .right {\n      height: calc(100vh - 2.6em);\n      width: 100%;\n      overflow-x: auto;\n    }\n  }\n\n  @media (max-width: 992px) {\n    .left {\n      border-bottom: 1px solid #006dff;\n    }\n  }\n`;\n\nfunction Notes() {\n  const [query, setQuery] = useState(\"\");\n  const { path, url } = useRouteMatch();\n  const dispatch = useDispatch();\n\n  const goAddNote = async (query: string) => {\n    await dispatch(addNote(query));\n    setQuery(\"\");\n  };\n\n  return (\n    <section className={stylesClass}>\n      <div className=\"left\">\n        <Search\n          query={query}\n          setQuery={(e) => setQuery(e)}\n          addNote={goAddNote}\n        />\n        <Nav url={url} query={query} />\n      </div>\n\n      <div className=\"right\">\n        <Switch>\n          <Route exact path={path}>\n            <ShortcutsInfo />\n          </Route>\n          <Route path={`${path}/:noteId`}>\n            <Body />\n          </Route>\n        </Switch>\n      </div>\n    </section>\n  );\n}\n\nexport default Notes;\n"],"sourceRoot":""}