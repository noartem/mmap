{"version":3,"sources":["../node_modules/refractor/lang/toml.js"],"names":["toml","Prism","key","languages","comment","pattern","greedy","table","RegExp","lookbehind","alias","string","date","number","boolean","punctuation","module","exports","displayName","aliases"],"mappings":"gGAKA,SAASA,EAAKC,IACX,SAAWA,GAEV,IAAIC,EAAM,qDACVD,EAAME,UAAUH,KAAO,CACrBI,QAAS,CACPC,QAAS,MACTC,QAAQ,GAEVC,MAAO,CACLF,QAASG,OACP,6BACEN,EACA,iBACAA,EACA,gBACF,KAEFO,YAAY,EACZH,QAAQ,EACRI,MAAO,cAETR,IAAK,CACHG,QAASG,OACP,mBAAqBN,EAAM,iBAAmBA,EAAM,cACpD,KAEFO,YAAY,EACZH,QAAQ,EACRI,MAAO,YAETC,OAAQ,CACNN,QAAS,8EACTC,QAAQ,GAEVM,KAAM,CACJ,CAEEP,QAAS,gFACTK,MAAO,UAET,CAEEL,QAAS,+BACTK,MAAO,WAGXG,OAAQ,uKACRC,QAAS,qBACTC,YAAa,cAhDhB,CAkDEd,GAtDLe,EAAOC,QAAUjB,EACjBA,EAAKkB,YAAc,OACnBlB,EAAKmB,QAAU","file":"static/js/react-syntax-highlighter_languages_refractor_toml.72cf2101.chunk.js","sourcesContent":["'use strict'\n\nmodule.exports = toml\ntoml.displayName = 'toml'\ntoml.aliases = []\nfunction toml(Prism) {\n  ;(function (Prism) {\n    // pattern: /(?:[\\w-]+|'[^'\\n\\r]*'|\"(?:\\.|[^\\\\\"\\r\\n])*\")/\n    var key = '(?:[\\\\w-]+|\\'[^\\'\\n\\r]*\\'|\"(?:\\\\.|[^\\\\\\\\\"\\r\\n])*\")'\n    Prism.languages.toml = {\n      comment: {\n        pattern: /#.*/,\n        greedy: true\n      },\n      table: {\n        pattern: RegExp(\n          '(^\\\\s*\\\\[\\\\s*(?:\\\\[\\\\s*)?)' +\n            key +\n            '(?:\\\\s*\\\\.\\\\s*' +\n            key +\n            ')*(?=\\\\s*\\\\])',\n          'm'\n        ),\n        lookbehind: true,\n        greedy: true,\n        alias: 'class-name'\n      },\n      key: {\n        pattern: RegExp(\n          '(^\\\\s*|[{,]\\\\s*)' + key + '(?:\\\\s*\\\\.\\\\s*' + key + ')*(?=\\\\s*=)',\n          'm'\n        ),\n        lookbehind: true,\n        greedy: true,\n        alias: 'property'\n      },\n      string: {\n        pattern: /\"\"\"(?:\\\\[\\s\\S]|[^\\\\])*?\"\"\"|'''[\\s\\S]*?'''|'[^'\\n\\r]*'|\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,\n        greedy: true\n      },\n      date: [\n        {\n          // Offset Date-Time, Local Date-Time, Local Date\n          pattern: /\\d{4}-\\d{2}-\\d{2}(?:[T\\s]\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|[+-]\\d{2}:\\d{2})?)?/i,\n          alias: 'number'\n        },\n        {\n          // Local Time\n          pattern: /\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?/i,\n          alias: 'number'\n        }\n      ],\n      number: /(?:\\b0(?:x[\\da-zA-Z]+(?:_[\\da-zA-Z]+)*|o[0-7]+(?:_[0-7]+)*|b[10]+(?:_[10]+)*))\\b|[-+]?\\d+(?:_\\d+)*(?:\\.\\d+(?:_\\d+)*)?(?:[eE][+-]?\\d+(?:_\\d+)*)?\\b|[-+]?(?:inf|nan)\\b/,\n      boolean: /\\b(?:true|false)\\b/,\n      punctuation: /[.,=[\\]{}]/\n    }\n  })(Prism)\n}\n"],"sourceRoot":""}