{"version":3,"sources":["../node_modules/refractor/lang/lilypond.js"],"names":["lilypond","Prism","schemeExpression","source","i","replace","languages","comment","pattern","RegExp","lookbehind","greedy","inside","scheme","alias","punctuation","rest","string","keyword","operator","number","ly","module","exports","displayName","aliases"],"mappings":"gGAKA,SAASA,EAASC,IACf,SAAWA,GAKV,IAJA,IAAIC,EAAmB,8FACpBC,OAGMC,EAAI,EAAGA,EADQ,EACeA,IACrCF,EAAmBA,EAAiBG,QAAQ,WAAW,WACrD,OAAOH,KAGXA,EAAmBA,EAAiBG,QAAQ,UAAW,UAAUF,QACjE,IAAIH,EAAYC,EAAMK,UAAUN,SAAW,CACzCO,QAAS,8BACT,kBAAmB,CACjBC,QAASC,OACP,8DAA8DN,OAAOE,QACnE,WACA,WACE,OAAOH,KAGX,KAEFQ,YAAY,EACZC,QAAQ,EACRC,OAAQ,CACNC,OAAQ,CACNL,QAAS,eACTE,YAAY,EACZI,MAAO,kBACPF,OAAQ,CACN,oBAAqB,CACnBJ,QAAS,iBACTG,QAAQ,EACRC,OAAQ,CACNG,YAAa,YACbf,SAAU,CACRQ,QAAS,UACTM,MAAO,oBACPF,OAAQ,QAIdI,KAAMf,EAAMK,UAAUO,SAG1BE,YAAa,MAGjBE,OAAQ,CACNT,QAAS,oBACTG,QAAQ,GAEV,aAAc,CACZH,QAAS,mBACTE,YAAY,GAEdQ,QAAS,CACPV,QAAS,iBACTI,OAAQ,CACNG,YAAa,QAGjBI,SAAU,aACVJ,YAAa,CACXP,QAAS,uGACTE,YAAY,GAEdU,OAAQ,qBAEVpB,EAAS,mBAAmBY,OAA5B,OAA6CA,OAC3C,qBACAA,OAFF,SAEqBA,OAASZ,EAC9BC,EAAMK,UAAUe,GAAKrB,EAzEtB,CA0EEC,GA9ELqB,EAAOC,QAAUvB,EACjBA,EAASwB,YAAc,WACvBxB,EAASyB,QAAU","file":"static/js/react-syntax-highlighter_languages_refractor_lilypond.566c196d.chunk.js","sourcesContent":["'use strict'\n\nmodule.exports = lilypond\nlilypond.displayName = 'lilypond'\nlilypond.aliases = []\nfunction lilypond(Prism) {\n  ;(function (Prism) {\n    var schemeExpression = /\\((?:[^();\"#\\\\]|\\\\[\\s\\S]|;.*|\"(?:[^\"\\\\]|\\\\.)*\"|#(?:\\{(?:(?!#\\})[\\s\\S])*#\\}|[^{])|<expr>)*\\)/\n      .source // allow for up to pow(2, recursivenessLog2) many levels of recursive brace expressions\n    // For some reason, this can't be 4\n    var recursivenessLog2 = 5\n    for (var i = 0; i < recursivenessLog2; i++) {\n      schemeExpression = schemeExpression.replace(/<expr>/g, function () {\n        return schemeExpression\n      })\n    }\n    schemeExpression = schemeExpression.replace(/<expr>/g, /[^\\s\\S]/.source)\n    var lilypond = (Prism.languages.lilypond = {\n      comment: /%(?:(?!\\{).*|\\{[\\s\\S]*?%\\})/,\n      'embedded-scheme': {\n        pattern: RegExp(\n          /(^|[=\\s])#(?:\"(?:[^\"\\\\]|\\\\.)*\"|[^\\s()\"]*(?:[^\\s()]|<expr>))/.source.replace(\n            /<expr>/g,\n            function () {\n              return schemeExpression\n            }\n          ),\n          'm'\n        ),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          scheme: {\n            pattern: /^(#)[\\s\\S]+$/,\n            lookbehind: true,\n            alias: 'language-scheme',\n            inside: {\n              'embedded-lilypond': {\n                pattern: /#\\{[\\s\\S]*?#\\}/,\n                greedy: true,\n                inside: {\n                  punctuation: /^#\\{|#\\}$/,\n                  lilypond: {\n                    pattern: /[\\s\\S]+/,\n                    alias: 'language-lilypond',\n                    inside: null // see below\n                  }\n                }\n              },\n              rest: Prism.languages.scheme\n            }\n          },\n          punctuation: /#/\n        }\n      },\n      string: {\n        pattern: /\"(?:[^\"\\\\]|\\\\.)*\"/,\n        greedy: true\n      },\n      'class-name': {\n        pattern: /(\\\\new\\s+)[\\w-]+/,\n        lookbehind: true\n      },\n      keyword: {\n        pattern: /\\\\[a-z][-\\w]*/i,\n        inside: {\n          punctuation: /^\\\\/\n        }\n      },\n      operator: /[=|]|<<|>>/,\n      punctuation: {\n        pattern: /(^|[a-z\\d])(?:'+|,+|[_^]?-[_^]?(?:[-+^!>._]|(?=\\d))|[_^]\\.?|[.!])|[{}()[\\]<>^~]|\\\\[()[\\]<>\\\\!]|--|__/,\n        lookbehind: true\n      },\n      number: /\\b\\d+(?:\\/\\d+)?\\b/\n    })\n    lilypond['embedded-scheme'].inside['scheme'].inside[\n      'embedded-lilypond'\n    ].inside['lilypond'].inside = lilypond\n    Prism.languages.ly = lilypond\n  })(Prism)\n}\n"],"sourceRoot":""}