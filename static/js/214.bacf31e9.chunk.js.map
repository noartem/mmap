{"version":3,"sources":["features/notes/ShortcutsInfo.tsx","features/notes/Search.tsx","features/notes/Nav.tsx","features/notes/code.tsx","features/notes/Body.tsx","features/notes/Notes.tsx"],"names":["ShortcutsInfo","className","connector","connect","query","selectNotesQuery","state","dispatch","search","addNote","searchInput","useRef","useShortcut","ref","name","placeholder","value","onChange","e","focusable","disabled","onClick","Links","NavLink","url","notes","useSelector","push","useHistory","useShcut","i","String","useNoteShortcuts","note","title","key","component","to","Code","children","language","style","noteId","useParams","selectNote","useDispatch","useState","bodyInput","notEditing","editingBody","editNote","setEditingName","setEditingBody","saveNote","updateNote","id","body","tryDeleteNote","window","deleteNote","closeNote","unstable_system","palette","options","overrides","code","as","useRouteMatch","exact","path"],"mappings":"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","file":"static/js/214.bacf31e9.chunk.js","sourcesContent":["import React from \"react\";\nimport { css } from \"linaria\";\n\nconst styleClass = css`\n  p {\n    padding: 1em 1.5em;\n  }\n`;\n\nexport default function ShortcutsInfo() {\n  return (\n    <div className={styleClass}>\n      <p>\n        <b> Alt + S</b> focus search input\n      </p>\n      <p>\n        <b> Control + Alt + $number</b> open <i>$number</i> note\n      </p>\n      <p>\n        <b> Ctrl + B</b> toggle edit mode\n      </p>\n      <p>\n        <b> Alt + I </b> delete note\n      </p>\n      <p>\n        <b> Escape </b> close note\n      </p>\n    </div>\n  );\n}\n","import React, { useRef } from \"react\";\nimport { connect, ConnectedProps } from \"react-redux\";\nimport { Button } from \"reakit/Button\";\nimport { Input } from \"reakit/Input\";\nimport { css } from \"linaria\";\n\nimport { useShortcut } from \"../../utils\";\n\nimport { RootState } from \"../../app/store\";\nimport { search, addNote, selectNotesQuery } from \"./notesSlice\";\n\nconst styleClass = css`\n  display: flex;\n  padding: 0.5em 0.75em;\n  height: 2.4em;\n\n  border-bottom: 1px solid #006dff;\n\n  input {\n    border: none;\n    margin: 0 0.5em 0 0 !important;\n  }\n`;\n\nfunction Search({ query, search, addNote }: IProps) {\n  const searchInput = useRef<HTMLInputElement>(null);\n\n  useShortcut(\"alt+s\", () => searchInput.current?.focus(), [searchInput]);\n\n  return (\n    <header className={styleClass}>\n      <Input\n        ref={searchInput}\n        name=\"search\"\n        placeholder=\"Search... (Alt + S to focus)\"\n        value={query}\n        onChange={(e) => search(e.target.value)}\n      />\n      <Button focusable disabled={query === \"\"} onClick={() => addNote(query)}>\n        Add\n      </Button>\n    </header>\n  );\n}\n\nconst connector = connect(\n  (state: RootState) => ({ query: selectNotesQuery(state) }),\n  (dispatch) => ({\n    search: (query: string) => dispatch(search(query)),\n    addNote: (query: string) => dispatch(addNote(query)),\n  })\n);\n\ntype IProps = ConnectedProps<typeof connector>;\n\nexport default connector(Search);\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { styled } from \"linaria/react\";\nimport { Link, useHistory } from \"react-router-dom\";\n\nimport { useShortcut } from \"../../utils\";\n\nimport { selectSearchingNotes } from \"./notesSlice\";\n\nconst Links = styled.ul`\n  margin: 0;\n  padding: 0;\n\n  li {\n    list-style: none;\n  }\n`;\n\nconst NavLink = styled.a`\n  display: block;\n  padding: 0.5em 0.75em;\n\n  overflow: hidden;\n  text-overflow: ellipsis;\n  font-size: 18px;\n  text-decoration: none;\n  text-align: left;\n  color: inherit;\n  transition: 0.1s;\n\n  &:focus,\n  &:hover,\n  &:active {\n    background: #006dff;\n    color: white;\n  }\n`;\n\nfunction useNoteShortcuts(url: string) {\n  const notes = useSelector(selectSearchingNotes);\n  const { push } = useHistory();\n\n  const useShcut = (i: number) =>\n    useShortcut(\n      `ctrl+alt+${String(i + 1)}`,\n      () => (i >= notes.length ? null : push(`${url}/${notes[i].id}`)),\n      [notes, push]\n    );\n\n  useShcut(0);\n  useShcut(1);\n  useShcut(2);\n  useShcut(3);\n  useShcut(4);\n  useShcut(5);\n  useShcut(6);\n  useShcut(7);\n  useShcut(8);\n  useShcut(9);\n}\n\nfunction Nav({ url }: IProps) {\n  const notes = useSelector(selectSearchingNotes);\n\n  useNoteShortcuts(url);\n\n  return (\n    <div>\n      <Links>\n        {notes.map((note) => (\n          <li title={note.name} key={note.id}>\n            <Link component={NavLink} to={`${url}/${note.id}`}>\n              {note.name}\n            </Link>\n          </li>\n        ))}\n      </Links>\n    </div>\n  );\n}\n\ninterface IProps {\n  url: string;\n}\n\nexport default Nav;\n","import React from \"react\";\nimport { css } from \"linaria\";\n\nimport { PrismAsyncLight as SyntaxHighlighter } from \"react-syntax-highlighter\";\nimport { ghcolors as theme } from \"react-syntax-highlighter/dist/esm/styles/prism\";\n\ninterface IProps {\n  className: string;\n  children: React.ReactChildren;\n}\n\nconst stylesClass = css`\n  padding: 0;\n  font-size: 1.5em;\n  line-height: 1.5;\n  background: none;\n  border: none;\n`;\n\nexport const Code = ({ className, children }: IProps) => (\n  <SyntaxHighlighter\n    className={stylesClass}\n    language={\n      className === \"\" || className === undefined ? \"\" : className.split(\"-\")[1]\n    }\n    style={theme}\n    children={children}\n  />\n);\n","import React, { useState, useRef, Fragment } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { css } from \"linaria\";\nimport Markdown from \"markdown-to-jsx\";\nimport { Button } from \"reakit/Button\";\nimport { Input } from \"reakit/Input\";\nimport { useParams, useHistory } from \"react-router-dom\";\n\nimport { useShortcut } from \"../../utils\";\n\nimport { selectNote, updateNote, deleteNote } from \"./notesSlice\";\nimport { Code } from \"./code\";\n\nconst stylesClass = css`\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n\n  textarea {\n    width: 100%;\n    height: 100%;\n    border: none;\n  }\n\n  #body_content {\n    overflow: auto;\n  }\n\n  #body_content,\n  textarea,\n  nav {\n    padding: 0.5em 0.75em;\n  }\n\n  nav {\n    top: 0;\n    position: sticky;\n\n    background: #fff;\n    border-bottom: 1px solid #006dff;\n\n    display: flex;\n\n    h1 {\n      overflow: hidden;\n      text-overflow: ellipsis;\n      margin: auto 0;\n    }\n\n    .controls {\n      margin-left: auto;\n      display: flex;\n\n      button {\n        margin-left: 0.5em;\n      }\n    }\n  }\n`;\n\nfunction Body() {\n  const { noteId } = useParams<{ noteId: string }>();\n  const note = useSelector(selectNote(noteId));\n\n  const { push } = useHistory();\n  const dispatch = useDispatch();\n\n  const [editingBody, setEditingBody] = useState(\"\");\n  const [editingName, setEditingName] = useState(\"\");\n  const bodyInput = useRef<HTMLTextAreaElement>(null);\n\n  const notEditing = editingBody === \"\";\n\n  const editNote = () => {\n    if (!note) return;\n\n    setEditingName(note.name);\n    setEditingBody(note.body);\n    bodyInput.current?.focus();\n  };\n\n  const saveNote = () => {\n    if (!note) return;\n\n    dispatch(updateNote({ id: note.id, name: editingName, body: editingBody }));\n    setEditingName(\"\");\n    setEditingBody(\"\");\n  };\n\n  const tryDeleteNote = () => {\n    if (note && window.confirm(\"Are you sure?\")) dispatch(deleteNote(note.id));\n  };\n\n  const closeNote = () => push(\"/notes\");\n\n  useShortcut(\"ctrl+b\", () => (notEditing ? editNote() : saveNote()), [\n    note,\n    editingName,\n    editingBody,\n    bodyInput,\n  ]);\n\n  useShortcut(\"alt+i\", tryDeleteNote, []);\n\n  useShortcut(\"escape\", closeNote, []);\n\n  if (!note) {\n    closeNote();\n    return <p>Redirecting...</p>;\n  }\n\n  return (\n    <div className={stylesClass}>\n      <nav>\n        {notEditing ? (\n          <h1 title={note.name}>{note.name}</h1>\n        ) : (\n          <Input\n            value={editingName}\n            onChange={(e) => setEditingName(e.target.value)}\n          />\n        )}\n\n        <div className=\"controls\">\n          {notEditing ? (\n            <Fragment>\n              <Button onClick={editNote}>Edit</Button>\n              <Button\n                onClick={tryDeleteNote}\n                unstable_system={{ palette: \"danger\" }}\n              >\n                Delete\n              </Button>\n            </Fragment>\n          ) : (\n            <Button onClick={saveNote}>Save</Button>\n          )}\n        </div>\n      </nav>\n      {notEditing ? (\n        <div id=\"body_content\" className=\"markdown-body\">\n          <Markdown\n            children={note.body}\n            options={{\n              overrides: {\n                code: {\n                  component: Code,\n                },\n              },\n            }}\n          />\n        </div>\n      ) : (\n        <Input\n          name=\"body\"\n          placeholder=\"Some note body..\"\n          ref={bodyInput}\n          value={editingBody}\n          as=\"textarea\"\n          // @ts-ignore\n          onChange={(e) => setEditingBody(e.target.value)}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default Body;\n","import React from \"react\";\nimport { css } from \"linaria\";\nimport { Switch, Route, useRouteMatch } from \"react-router-dom\";\n\nimport ShortcutsInfo from \"./ShortcutsInfo\";\nimport Search from \"./Search\";\nimport Nav from \"./Nav\";\nimport Body from \"./Body\";\n\nconst stylesClass = css`\n  @media (min-width: 992px) {\n    display: flex;\n\n    .left {\n      width: 32%;\n      border-right: 1px solid #006dff;\n      overflow-y: auto;\n    }\n\n    .right {\n      height: calc(100vh - 2.6em);\n      width: 100%;\n      overflow-x: auto;\n    }\n  }\n\n  @media (max-width: 992px) {\n    .left {\n      border-bottom: 1px solid #006dff;\n    }\n  }\n`;\n\nfunction Notes() {\n  let { path, url } = useRouteMatch();\n\n  return (\n    <section className={stylesClass}>\n      <div className=\"left\">\n        <Search />\n        <Nav url={url} />\n      </div>\n\n      <div className=\"right\">\n        <Switch>\n          <Route exact path={path}>\n            <ShortcutsInfo />\n          </Route>\n          <Route path={`${path}/:noteId`}>\n            <Body />\n          </Route>\n        </Switch>\n      </div>\n    </section>\n  );\n}\n\nexport default Notes;\n"],"sourceRoot":""}