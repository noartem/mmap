{"version":3,"sources":["features/board/AddColumn.tsx","features/board/AddCard.tsx","features/board/Card.tsx","features/board/Column.tsx","features/board/Board.tsx"],"names":["GhostButton","Container","props","ButtonContainer","InputControls","useReducer","x","useState","inputRef","useRef","dispatch","useDispatch","startEditing","a","toggleIsEditing","stopEditing","setNewName","submitColumn","newName","addColumn","background","isEditing","ref","value","onKeyDown","e","onChange","onClick","size","columnId","setNewCard","newCard","addCard","cardName","Title","cardId","card","useSelector","selectCard","console","Header","Cards","isDragging","setIsDragging","column","selectColumn","menu","useMenuState","setInputName","className","inputName","editColumn","window","deleteColumn","groupName","getChildPayload","index","onDrop","removedIndex","addedIndex","payload","oldIndex","newIndex","tempAddCard","deleteCard","fromCards","moveCard","dropPlaceholder","animationDuration","showOnTop","onDragStart","p","onDragEnd","dragClass","key","Columns","Board","orientation","moveColumn","dragHandleSelector","columnOrder"],"mappings":"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","file":"static/js/215.f305c804.chunk.js","sourcesContent":["import React, { useState, useReducer, useRef } from \"react\";\nimport { styled } from \"linaria/react\";\nimport { Button } from \"reakit/Button\";\nimport { Clickable } from \"reakit/Clickable\";\nimport { Input } from \"reakit/Input\";\nimport { XIcon, DiffAddedIcon } from \"@primer/octicons-react\";\nimport { useDispatch } from \"react-redux\";\n\nimport { addColumn } from \"./boardSlice\";\n\nconst GhostButton = styled(Clickable)`\n  color: #fff;\n  display: flex;\n  width: 100%;\n  border: none;\n  padding: 0;\n  background: none;\n  cursor: pointer;\n  font-size: 14px;\n  font-weight: 600;\n  text-align: center;\n`;\n\nconst Container = styled.li<{ background: string }>`\n  width: 270px;\n  margin: 0.5em;\n  height: min-content;\n  border-radius: 0.4em;\n  padding: 0.5em 0.75em;\n  background: ${(props) => props.background};\n  font-size: 14px;\n`;\n\nconst ButtonContainer = styled.div`\n  button {\n    svg {\n      margin: auto 0.3em;\n    }\n  }\n`;\n\nconst InputControls = styled.div`\n  margin-top: 0.4em;\n  display: flex;\n\n  svg {\n    color: #000;\n    margin: auto 0 auto 0.4em;\n  }\n`;\n\nfunction AddColumn() {\n  const [isEditing, toggleIsEditing] = useReducer((x) => !x, false);\n  const [newName, setNewName] = useState(\"\");\n  const inputRef = useRef<HTMLInputElement>(null);\n  const dispatch = useDispatch();\n\n  const startEditing = async () => {\n    await toggleIsEditing();\n    inputRef.current?.focus();\n  };\n\n  const stopEditing = () => {\n    toggleIsEditing();\n    setNewName(\"\");\n  };\n\n  const submitColumn = async () => {\n    if (newName !== \"\") {\n      await dispatch(addColumn(newName));\n      stopEditing();\n    }\n  };\n\n  return (\n    <Container background={isEditing ? \"#ebecf0\" : \"rgba(0, 0, 0, 0.2)\"}>\n      {isEditing ? (\n        <>\n          <Input\n            ref={inputRef}\n            value={newName}\n            onKeyDown={(e) => e.key === \"Enter\" && submitColumn()}\n            onChange={(e) => setNewName(e.target.value)}\n          />\n          <InputControls>\n            <Button onClick={submitColumn}>Add to the bord</Button>\n            <GhostButton onClick={stopEditing}>\n              <XIcon size={24} />\n            </GhostButton>\n          </InputControls>\n        </>\n      ) : (\n        <ButtonContainer>\n          <GhostButton onClick={startEditing}>\n            <DiffAddedIcon size={18} />\n            <span>Add new column</span>\n          </GhostButton>\n        </ButtonContainer>\n      )}\n    </Container>\n  );\n}\n\nexport default AddColumn;\n","import React, { useState, useReducer, useRef } from \"react\";\nimport { styled } from \"linaria/react\";\nimport { Button } from \"reakit/Button\";\nimport { Input } from \"reakit/Input\";\nimport { XIcon, DiffAddedIcon } from \"@primer/octicons-react\";\nimport { useDispatch } from \"react-redux\";\n\nimport { addCard } from \"./boardSlice\";\nimport { GhostButton } from \"../../utils\";\n\nconst Container = styled.li`\n  margin-top: 0.5em !important;\n  font-size: 14px;\n`;\n\nconst ButtonContainer = styled.div`\n  button {\n    font-weight: normal;\n    svg {\n      margin: auto 0.3em auto 0;\n    }\n  }\n`;\n\nconst InputControls = styled.div`\n  margin-top: 0.5em;\n  display: flex;\n\n  svg {\n    color: #000;\n    margin: auto 0 auto 0.5em;\n  }\n`;\n\ninterface IProps {\n  columnId: string;\n}\n\nfunction AddColumn({ columnId }: IProps) {\n  const [isEditing, toggleIsEditing] = useReducer((x) => !x, false);\n  const [newCard, setNewCard] = useState(\"\");\n  const inputRef = useRef<HTMLInputElement>(null);\n  const dispatch = useDispatch();\n\n  const startEditing = async () => {\n    await toggleIsEditing();\n    inputRef.current?.focus();\n  };\n\n  const stopEditing = () => {\n    toggleIsEditing();\n    setNewCard(\"\");\n  };\n\n  const submitColumn = async () => {\n    if (newCard !== \"\") {\n      await dispatch(addCard({ columnId, cardName: newCard }));\n      stopEditing();\n    }\n  };\n\n  return (\n    <Container>\n      {isEditing ? (\n        <>\n          <Input\n            ref={inputRef}\n            value={newCard}\n            onKeyDown={(e) => e.key === \"Enter\" && submitColumn()}\n            onChange={(e) => setNewCard(e.target.value)}\n          />\n          <InputControls>\n            <Button onClick={submitColumn}>Add to the bord</Button>\n            <GhostButton onClick={stopEditing}>\n              <XIcon size={24} />\n            </GhostButton>\n          </InputControls>\n        </>\n      ) : (\n        <ButtonContainer>\n          <GhostButton onClick={startEditing}>\n            <DiffAddedIcon size={18} />\n            <span>Add new column</span>\n          </GhostButton>\n        </ButtonContainer>\n      )}\n    </Container>\n  );\n}\n\nexport default AddColumn;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { styled } from \"linaria/react\";\nimport { Clickable } from \"reakit/Clickable\";\n\nimport { selectCard } from \"./boardSlice\";\n\ninterface IProps {\n  cardId: string;\n}\n\nconst Container = styled.div`\n  margin: 0.5em 0 0 0;\n  border-radius: 0.4em;\n  background: #fff;\n\n  &::last-child {\n    margin: 0;\n  }\n`;\n\nconst Title = styled.span`\n  margin: 0;\n\n  button {\n    margin: 0;\n    border: none;\n    background: inherit;\n    padding: 0;\n    cursor: pointer;\n    padding: 0.5em 0.75em;\n    width: 100%;\n    height: 100%;\n    font-size: 14px;\n    text-align: left;\n  }\n`;\n\nfunction Card({ cardId }: IProps) {\n  const card = useSelector(selectCard(cardId));\n\n  return (\n    <Container>\n      <Title>\n        <Clickable onClick={() => console.log(\"Open card #\" + cardId)}>\n          {card.name} #{card.id}\n        </Clickable>\n      </Title>\n    </Container>\n  );\n}\n\nexport default Card;\n","import React, { useState, useRef } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { styled } from \"linaria/react\";\nimport { Clickable } from \"reakit/Clickable\";\nimport { Input } from \"reakit/Input\";\nimport { useMenuState, Menu, MenuItem, MenuButton } from \"reakit/Menu\";\nimport { GrabberIcon, KebabHorizontalIcon } from \"@primer/octicons-react\";\nimport {\n  Container as DNDContainer,\n  Draggable,\n  DropResult,\n} from \"react-smooth-dnd\";\n\nimport {\n  selectColumn,\n  deleteCard,\n  tempAddCard,\n  moveCard,\n  editColumn,\n  deleteColumn,\n} from \"./boardSlice\";\nimport AddCard from \"./AddCard\";\nimport Card from \"./Card\";\n\ninterface IProps {\n  columnId: string;\n  isDragging: boolean;\n  setIsDragging: (val: boolean) => void;\n}\n\nconst Container = styled.li`\n  height: min-content;\n  width: 270px;\n  margin: 0.5em;\n  padding: 0.5em 0.75em;\n  background: #ebecf0;\n  border-radius: 0.4em;\n`;\n\nconst Header = styled.div`\n  font-size: 14px;\n  display: flex;\n\n  .column-drag-handle {\n    cursor: grab;\n    margin: auto 0;\n  }\n\n  input {\n    font-weight: 400;\n    background: inherit;\n  }\n\n  .column-menu {\n    display: flex;\n    margin: 0 0 0 auto;\n\n    button.menu-button {\n      border: none;\n      background: none !important;\n      margin: auto 0 auto 0.5em;\n      color: #000 !important;\n      padding: 0;\n      svg {\n        width: 16px;\n        height: 16px;\n        margin: 0;\n        display: none;\n      }\n    }\n  }\n`;\n\nconst Title = styled.h2`\n  margin: 0;\n  display: flex;\n\n  button {\n    border: none;\n    background: inherit;\n    cursor: pointer;\n    margin: auto;\n    padding: 0;\n    font-family: inherit;\n    font-size: 14px;\n    font-weight: 600;\n  }\n`;\n\nconst Cards = styled.ul<{ isDragging: boolean }>`\n  list-style: none;\n  margin: 0;\n  padding: 0;\n\n  li {\n    margin: 0;\n    padding: 0;\n    z-index: 10;\n  }\n\n  .cards-drop-preview {\n    margin-top: 0.5em;\n    background: rgba(0, 0, 0, 0.2);\n    border-radius: 0.4em;\n  }\n\n  .card-ghost {\n    transition: 0.2s;\n    transform: rotate(7deg);\n    cursor: grabbing;\n  }\n\n  .smooth-dnd-container {\n    transition: 0.2s;\n    min-height: ${({ isDragging }) => (isDragging ? \"30px\" : \"0\")};\n  }\n`;\n\nfunction Column({ columnId, isDragging, setIsDragging }: IProps) {\n  const column = useSelector(selectColumn(columnId));\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [inputName, setInputName] = useState(\"\");\n\n  const dispatch = useDispatch();\n  const menu = useMenuState();\n\n  const startEditing = () => {\n    setInputName(column.name);\n    inputRef.current?.focus();\n  };\n\n  const saveName = () => {\n    dispatch(editColumn({ columnId, newName: inputName }));\n    setInputName(\"\");\n  };\n\n  const tryDeleteColumn = () =>\n    window.confirm(\"Are you sure?\") && dispatch(deleteColumn(columnId));\n\n  const onCardDrop = ({\n    removedIndex: oldIndex,\n    addedIndex: newIndex,\n    payload: cardId,\n  }: DropResult) => {\n    if ((oldIndex === null && newIndex === null) || oldIndex === newIndex)\n      return;\n\n    // move card in column\n    if (oldIndex !== null && newIndex !== null) {\n      dispatch(moveCard({ columnId, cardId, newIndex }));\n      return;\n    }\n\n    // remove from previous column\n    if (oldIndex !== null) {\n      dispatch(deleteCard({ cardId, columnId, fromCards: false }));\n      return;\n    }\n\n    if (newIndex !== null) {\n      dispatch(tempAddCard({ cardId, columnId, newIndex }));\n      return;\n    }\n  };\n\n  return (\n    <Container>\n      <Header>\n        <span className=\"column-drag-handle\">\n          <GrabberIcon size={18} />\n        </span>\n        {inputName !== \"\" ? (\n          <Input\n            ref={inputRef}\n            onKeyDown={(e) => e.key === \"Enter\" && saveName()}\n            onChange={(e) => setInputName(e.target.value)}\n            value={inputName}\n          />\n        ) : (\n          <Title>\n            <Clickable onClick={startEditing}>{column.name}</Clickable>\n          </Title>\n        )}\n        <div className=\"column-menu\">\n          <MenuButton {...menu} className=\"menu-button\">\n            <KebabHorizontalIcon size={20} />\n          </MenuButton>\n          <Menu {...menu}>\n            <MenuItem {...menu} onClick={startEditing}>\n              Edit column name\n            </MenuItem>\n            <MenuItem {...menu} onClick={tryDeleteColumn}>\n              Delete Column\n            </MenuItem>\n          </Menu>\n        </div>\n      </Header>\n      <Cards isDragging={isDragging}>\n        <DNDContainer\n          groupName=\"column\"\n          getChildPayload={(index) => column.cardsIds[index]}\n          onDrop={onCardDrop}\n          dropPlaceholder={{\n            animationDuration: 200,\n            showOnTop: true,\n            className: \"cards-drop-preview\",\n          }}\n          onDragStart={(p) => p.isSource && setIsDragging(true)}\n          onDragEnd={(p) => p.isSource && setIsDragging(false)}\n          dragClass=\"card-ghost\"\n        >\n          {column.cardsIds.map((cardId) => (\n            <Draggable key={cardId}>\n              <Card cardId={cardId} />\n            </Draggable>\n          ))}\n        </DNDContainer>\n        <AddCard columnId={columnId} />\n      </Cards>\n    </Container>\n  );\n}\n\nexport default Column;\n","import React, { useState } from \"react\";\nimport { styled } from \"linaria/react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n  Container as DNDContainer,\n  Draggable,\n  DropResult,\n} from \"react-smooth-dnd\";\n\nimport { selectBoard, moveColumn } from \"./boardSlice\";\nimport AddColumn from \"./AddColumn\";\nimport Column from \"./Column\";\n\nconst Container = styled.div<{ background: string }>`\n  background: ${(props) => props.background};\n  height: calc(100vh - 2.6em);\n  width: 100%;\n  overflow-x: auto;\n  overflow-y: hidden;\n`;\n\nconst Columns = styled.ul`\n  padding: 0;\n  margin: 0;\n  list-style: none;\n  min-width: 100%;\n  min-height: 100%;\n  display: inline-flex;\n\n  .columns-drop-preview {\n    background: rgba(0, 0, 0, 0.2);\n    margin: 0.5em;\n    border-radius: 0.4em;\n  }\n`;\n\nfunction Board() {\n  const { columnOrder, background } = useSelector(selectBoard);\n  const dispatch = useDispatch();\n  const [isDragging, setIsDragging] = useState(false);\n\n  const onColumnDrop = ({ removedIndex, addedIndex }: DropResult) =>\n    removedIndex !== null &&\n    addedIndex !== null &&\n    dispatch(\n      moveColumn({\n        oldIndex: removedIndex,\n        newIndex: addedIndex,\n      })\n    );\n\n  return (\n    <Container background={background}>\n      <Columns>\n        <DNDContainer\n          groupName=\"board\"\n          orientation=\"horizontal\"\n          onDrop={onColumnDrop}\n          dragHandleSelector=\".column-drag-handle\"\n          dropPlaceholder={{\n            animationDuration: 200,\n            showOnTop: true,\n            className: \"columns-drop-preview\",\n          }}\n        >\n          {columnOrder.map((columnId) => (\n            <Draggable key={\"column-\" + columnId}>\n              <Column\n                columnId={columnId}\n                isDragging={isDragging}\n                setIsDragging={setIsDragging}\n              />\n            </Draggable>\n          ))}\n        </DNDContainer>\n        <AddColumn />\n      </Columns>\n    </Container>\n  );\n}\n\nexport default () => <Board />;\n"],"sourceRoot":""}