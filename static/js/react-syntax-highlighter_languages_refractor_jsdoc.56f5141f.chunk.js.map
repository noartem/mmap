{"version":3,"sources":["../node_modules/refractor/lang/javadoclike.js","../node_modules/refractor/lang/jsdoc.js"],"names":["javadoclike","Prism","javaDocLike","languages","parameter","pattern","lookbehind","keyword","punctuation","Object","defineProperty","value","docLanguage","forEach","lang","callback","grammar","token","definition","alias","insertBefore","RegExp","Array","isArray","i","l","length","docCommentSupport","inside","rest","addSupport","module","exports","displayName","aliases","refractorJavadoclike","require","jsdoc","register","javascript","type","source","parameterPrefix","extend","code","example"],"mappings":"kGAKA,SAASA,EAAYC,IAClB,SAAWA,GACV,IAAIC,EAAeD,EAAME,UAAUH,YAAc,CAC/CI,UAAW,CACTC,QAAS,8DACTC,YAAY,GAEdC,QAAS,CAGPF,QAAS,qDACTC,YAAY,GAEdE,YAAa,QAgEfC,OAAOC,eAAeR,EAAa,aAAc,CAC/CS,MAdF,SAAoBR,EAAWS,GACJ,kBAAdT,IACTA,EAAY,CAACA,IAEfA,EAAUU,SAAQ,SAAUC,IA/C9B,SAA2BA,EAAMC,GAC/B,IACIC,EAAUf,EAAME,UAAUW,GAC9B,GAAKE,EAAL,CAGA,IAAIC,EAAQD,EALI,eAMhB,IAAKC,EAAO,CAEV,IAAIC,EAAa,CACjBA,cAAwB,CACtBb,QAAS,wCACTC,YAAY,EACZa,MAAO,YAGTF,GADAD,EAAUf,EAAME,UAAUiB,aAAaN,EAAM,UAAWI,IAd1C,eAuBhB,GANID,aAAiBI,SAEnBJ,EAAQD,EAnBM,eAmBe,CAC3BX,QAASY,IAGTK,MAAMC,QAAQN,GAChB,IAAK,IAAIO,EAAI,EAAGC,EAAIR,EAAMS,OAAQF,EAAIC,EAAGD,IACnCP,EAAMO,aAAcH,SACtBJ,EAAMO,GAAK,CACTnB,QAASY,EAAMO,KAGnBT,EAASE,EAAMO,SAGjBT,EAASE,IAcTU,CAAkBb,GAAM,SAAUT,GAC3BA,EAAQuB,SACXvB,EAAQuB,OAAS,IAEnBvB,EAAQuB,OAAOC,KAAOjB,WAO5BV,EAAY4B,WAAW,CAAC,OAAQ,aAAc,OAAQ5B,GA/EvD,CAgFED,GApFL8B,EAAOC,QAAUhC,EACjBA,EAAYiC,YAAc,cAC1BjC,EAAYkC,QAAU,I,iCCHtB,IAAIC,EAAuBC,EAAQ,KAInC,SAASC,EAAMpC,GACbA,EAAMqC,SAASH,GACd,SAAWlC,GACV,IAAIsC,EAAatC,EAAME,UAAUoC,WAC7BC,EAAO,qCAAqCC,OAC5CC,EACF,2CAA6CF,EAAO,UACtDvC,EAAME,UAAUkC,MAAQpC,EAAME,UAAUwC,OAAO,cAAe,CAC5DvC,UAAW,CAETC,QAASgB,OAAOqB,EAAkB,6BAA6BD,QAC/DnC,YAAY,EACZsB,OAAQ,CACNpB,YAAa,SAInBP,EAAME,UAAUiB,aAAa,QAAS,UAAW,CAC/C,qBAAsB,CAEpBf,QAASgB,OACPqB,EAAkB,8CAA8CD,QAElEnC,YAAY,EACZsB,OAAQ,CACNxB,UAAW,CACTC,QAAS,2BACTC,YAAY,EACZsB,OAAQ,CACNpB,YAAa,OAGjBoC,KAAM,CACJvC,QAAS,oBACTC,YAAY,EACZsB,OAAQW,EACRpB,MAAO,uBAETX,YAAa,WAGjB,aAAc,CACZ,CACEH,QAASgB,OAAO,gBAAkBmB,GAClClC,YAAY,EACZsB,OAAQ,CACNpB,YAAa,sBAGjB,CACEH,QAAS,oFACTC,YAAY,EACZsB,OAAQ,CACNpB,YAAa,QAInBqC,QAAS,CACPxC,QAAS,mDACTC,YAAY,EACZsB,OAAQ,CACNgB,KAAM,CACJvC,QAAS,uBACTC,YAAY,EACZsB,OAAQW,EACRpB,MAAO,2BAKflB,EAAME,UAAUH,YAAY8B,WAAW,aAAc7B,EAAME,UAAUkC,OApEtE,CAqEEpC,GA1EL8B,EAAOC,QAAUK,EACjBA,EAAMJ,YAAc,QACpBI,EAAMH,QAAU","file":"static/js/react-syntax-highlighter_languages_refractor_jsdoc.56f5141f.chunk.js","sourcesContent":["'use strict'\n\nmodule.exports = javadoclike\njavadoclike.displayName = 'javadoclike'\njavadoclike.aliases = []\nfunction javadoclike(Prism) {\n  ;(function (Prism) {\n    var javaDocLike = (Prism.languages.javadoclike = {\n      parameter: {\n        pattern: /(^\\s*(?:\\/{3}|\\*|\\/\\*\\*)\\s*@(?:param|arg|arguments)\\s+)\\w+/m,\n        lookbehind: true\n      },\n      keyword: {\n        // keywords are the first word in a line preceded be an `@` or surrounded by curly braces.\n        // @word, {@word}\n        pattern: /(^\\s*(?:\\/{3}|\\*|\\/\\*\\*)\\s*|\\{)@[a-z][a-zA-Z-]+\\b/m,\n        lookbehind: true\n      },\n      punctuation: /[{}]/\n    })\n    /**\n     * Adds doc comment support to the given language and calls a given callback on each doc comment pattern.\n     *\n     * @param {string} lang the language add doc comment support to.\n     * @param {(pattern: {inside: {rest: undefined}}) => void} callback the function called with each doc comment pattern as argument.\n     */\n    function docCommentSupport(lang, callback) {\n      var tokenName = 'doc-comment'\n      var grammar = Prism.languages[lang]\n      if (!grammar) {\n        return\n      }\n      var token = grammar[tokenName]\n      if (!token) {\n        // add doc comment: /** */\n        var definition = {}\n        definition[tokenName] = {\n          pattern: /(^|[^\\\\])\\/\\*\\*[^/][\\s\\S]*?(?:\\*\\/|$)/,\n          lookbehind: true,\n          alias: 'comment'\n        }\n        grammar = Prism.languages.insertBefore(lang, 'comment', definition)\n        token = grammar[tokenName]\n      }\n      if (token instanceof RegExp) {\n        // convert regex to object\n        token = grammar[tokenName] = {\n          pattern: token\n        }\n      }\n      if (Array.isArray(token)) {\n        for (var i = 0, l = token.length; i < l; i++) {\n          if (token[i] instanceof RegExp) {\n            token[i] = {\n              pattern: token[i]\n            }\n          }\n          callback(token[i])\n        }\n      } else {\n        callback(token)\n      }\n    }\n    /**\n     * Adds doc-comment support to the given languages for the given documentation language.\n     *\n     * @param {string[]|string} languages\n     * @param {Object} docLanguage\n     */\n    function addSupport(languages, docLanguage) {\n      if (typeof languages === 'string') {\n        languages = [languages]\n      }\n      languages.forEach(function (lang) {\n        docCommentSupport(lang, function (pattern) {\n          if (!pattern.inside) {\n            pattern.inside = {}\n          }\n          pattern.inside.rest = docLanguage\n        })\n      })\n    }\n    Object.defineProperty(javaDocLike, 'addSupport', {\n      value: addSupport\n    })\n    javaDocLike.addSupport(['java', 'javascript', 'php'], javaDocLike)\n  })(Prism)\n}\n","'use strict'\nvar refractorJavadoclike = require('./javadoclike.js')\nmodule.exports = jsdoc\njsdoc.displayName = 'jsdoc'\njsdoc.aliases = []\nfunction jsdoc(Prism) {\n  Prism.register(refractorJavadoclike)\n  ;(function (Prism) {\n    var javascript = Prism.languages.javascript\n    var type = /{(?:[^{}]|{(?:[^{}]|{[^{}]*})*})+}/.source\n    var parameterPrefix =\n      '(@(?:param|arg|argument|property)\\\\s+(?:' + type + '\\\\s+)?)'\n    Prism.languages.jsdoc = Prism.languages.extend('javadoclike', {\n      parameter: {\n        // @param {string} foo - foo bar\n        pattern: RegExp(parameterPrefix + /[$\\w\\xA0-\\uFFFF.]+(?=\\s|$)/.source),\n        lookbehind: true,\n        inside: {\n          punctuation: /\\./\n        }\n      }\n    })\n    Prism.languages.insertBefore('jsdoc', 'keyword', {\n      'optional-parameter': {\n        // @param {string} [baz.foo=\"bar\"] foo bar\n        pattern: RegExp(\n          parameterPrefix + /\\[[$\\w\\xA0-\\uFFFF.]+(?:=[^[\\]]+)?\\](?=\\s|$)/.source\n        ),\n        lookbehind: true,\n        inside: {\n          parameter: {\n            pattern: /(^\\[)[$\\w\\xA0-\\uFFFF\\.]+/,\n            lookbehind: true,\n            inside: {\n              punctuation: /\\./\n            }\n          },\n          code: {\n            pattern: /(=)[\\s\\S]*(?=\\]$)/,\n            lookbehind: true,\n            inside: javascript,\n            alias: 'language-javascript'\n          },\n          punctuation: /[=[\\]]/\n        }\n      },\n      'class-name': [\n        {\n          pattern: RegExp('(@[a-z]+\\\\s+)' + type),\n          lookbehind: true,\n          inside: {\n            punctuation: /[.,:?=<>|{}()[\\]]/\n          }\n        },\n        {\n          pattern: /(@(?:augments|extends|class|interface|memberof!?|this)\\s+)[A-Z]\\w*(?:\\.[A-Z]\\w*)*/,\n          lookbehind: true,\n          inside: {\n            punctuation: /\\./\n          }\n        }\n      ],\n      example: {\n        pattern: /(@example\\s+)[^@]+?(?=\\s*(?:\\*\\s*)?(?:@\\w|\\*\\/))/,\n        lookbehind: true,\n        inside: {\n          code: {\n            pattern: /^(\\s*(?:\\*\\s*)?).+$/m,\n            lookbehind: true,\n            inside: javascript,\n            alias: 'language-javascript'\n          }\n        }\n      }\n    })\n    Prism.languages.javadoclike.addSupport('javascript', Prism.languages.jsdoc)\n  })(Prism)\n}\n"],"sourceRoot":""}