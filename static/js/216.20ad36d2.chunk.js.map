{"version":3,"sources":["features/board/Card.tsx","features/board/Column.tsx","features/board/Board.tsx"],"names":["Container","Title","cardId","card","useSelector","selectCard","onClick","console","Header","Cards","columnId","column","selectColumn","inputRef","useRef","useState","dispatch","useDispatch","className","size","inputName","ref","onKeyDown","e","editColumn","newName","setInputName","onChange","value","groupName","getChildPayload","index","onDrop","removedIndex","addedIndex","payload","oldIndex","newIndex","tempAddCard","deleteCard","fromCards","moveCard","dropPlaceholder","animationDuration","showOnTop","dragClass","key","props","Columns","Board","background","orientation","moveColumn","dragHandleSelector","columnOrder"],"mappings":"iQAWMA,EAAS,4DAUTC,EAAK,yDA+BX,MAdA,SAAc,GAAqB,IAAnBC,EAAkB,EAAlBA,OACRC,EAAOC,YAAYC,YAAzB,IAEA,OACE,yBACE,yBACE,uBAAWC,QAAS,kBAAMC,YAAY,cAAtC,KACGJ,EAAD,KADF,KACgBA,EAAD,O,OCnBvB,IAAMH,EAAS,2DASTQ,EAAM,0DAiBNP,EAAK,wDAgBLQ,EAAK,uDA4GX,MApFA,SAAgB,GAAuB,IAArBC,EAAoB,EAApBA,SACVC,EAASP,YAAYQ,YAA3B,IACMC,EAAWC,iBAAjB,MAFoC,EAGFC,mBAAlC,IAHoC,mBAG9B,EAH8B,KAG9B,EAH8B,KAI9BC,EAAWC,cAsCjB,OACE,yBACE,yBACE,0BAAMC,UAAN,sBACE,uBAAaC,KAAb,MAEDC,OACC,uBACEC,IADF,EAEEC,UAAYC,YAAD,MAAOA,kBAvC1BP,EAASQ,YAAW,CAAEd,WAAUe,QAASL,UACzCM,QAuCQC,SAAWJ,YAAD,OAAOG,EAAaH,SAHhC,QAIEK,MALHR,IAQC,yBACE,uBAAWd,QAnDA,WAAO,IAAD,EACzBoB,EAAaf,EAAbe,MACAb,8CAiD2CF,EAAD,QAIxC,yBACE,+BACEkB,UADF,SAEEC,gBAAkBC,YAAD,OAAWpB,WAF9B,IAGEqB,OAjDW,SAAC,GAID,IAJC,EAIF,EAHhBC,aADkB,EAIF,EAFhBC,WACShC,EACO,EADhBiC,QAEKC,UAAD,OAAsBC,GAAsBD,IAAhD,IAIIA,UAAJ,OAAyBC,EAMzB,OAAID,EAKJ,OAAIC,GACFrB,EAASsB,YAAY,CAAEpC,SAAQQ,WAAU2B,cALzCrB,EAASuB,YAAW,CAAErC,SAAQQ,WAAU8B,WAAW,KANnDxB,EAASyB,YAAS,CAAE/B,WAAUR,SAAQmC,gBAwClCK,gBAAiB,CACfC,kBADe,IAEfC,WAFe,EAGf1B,UAAW,sBAEb2B,UATF,cAWGlC,gBAAqBT,YAAD,OACnB,+BAAW4C,IAAX,GACE,qBAAM5C,OAAN,Y,OC3Jd,IAAMF,EAAS,6EACE+C,YAAD,OAAWA,EADZ,gBAQTC,EAAO,yDAeb,SAASC,IAAS,IAAD,EACqB7C,YAApC,KAAM,EADS,EACT,YAAe8C,EADN,EACMA,WACflC,EAAWC,cAYjB,OACE,qBAAWiC,WAAX,GACE,yBACE,+BACErB,UADF,QAEEsB,YAFF,aAGEnB,OAhBa,SAAC,GAAD,IAAC,EAAD,EAAC,aAAgBE,EAAjB,EAAiBA,WAAjB,OACnBD,iBACAC,GACAlB,EACEoC,YAAW,CACThB,SADS,EAETC,SAAUH,MAWRmB,mBAJF,sBAKEX,gBAAiB,CACfC,kBADe,IAEfC,WAFe,EAGf1B,UAAW,yBAGZoC,OAAgB,qBACf,+BAAWR,IAAK,UAAhB,GACE,qBAAQpC,SAAR,EAA4BqB,MAA5B,WASC,4BAAM,kBAArB,EAAqB,O","file":"static/js/216.20ad36d2.chunk.js","sourcesContent":["import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { styled } from \"linaria/react\";\nimport { Clickable } from \"reakit/Clickable\";\n\nimport { selectCard } from \"./boardSlice\";\n\ninterface IProps {\n  cardId: string;\n}\n\nconst Container = styled.div`\n  margin: 0.5em 0 0 0;\n  border-radius: 0.4em;\n  background: #fff;\n\n  &::last-child {\n    margin: 0;\n  }\n`;\n\nconst Title = styled.span`\n  margin: 0;\n\n  button {\n    margin: 0;\n    border: none;\n    background: inherit;\n    padding: 0;\n    cursor: pointer;\n    padding: 0.5em 0.75em;\n    width: 100%;\n    height: 100%;\n    font-size: 16px;\n    text-align: left;\n  }\n`;\n\nfunction Card({ cardId }: IProps) {\n  const card = useSelector(selectCard(cardId));\n\n  return (\n    <Container>\n      <Title>\n        <Clickable onClick={() => console.log(\"Open card #\" + cardId)}>\n          {card.name} #{card.id}\n        </Clickable>\n      </Title>\n    </Container>\n  );\n}\n\nexport default Card;\n","import React, { useState, useRef } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { styled } from \"linaria/react\";\nimport { Clickable } from \"reakit/Clickable\";\nimport { Input } from \"reakit/Input\";\nimport { GrabberIcon } from \"@primer/octicons-react\";\nimport {\n  Container as DNDContainer,\n  Draggable,\n  DropResult,\n} from \"react-smooth-dnd\";\n\nimport {\n  selectColumn,\n  deleteCard,\n  tempAddCard,\n  moveCard,\n  editColumn,\n} from \"./boardSlice\";\nimport Card from \"./Card\";\n\ninterface IProps {\n  columnId: string;\n  index: number;\n}\n\nconst Container = styled.li`\n  height: min-content;\n  width: 270px;\n  margin: 0.5em;\n  padding: 0.5em 0.75em;\n  background: #ebecf0;\n  border-radius: 0.4em;\n`;\n\nconst Header = styled.div`\n  display: flex;\n\n  .column-drag-handle {\n    cursor: grab;\n    margin: auto 0;\n  }\n\n  input {\n    font-weight: 400;\n    /* border: 0;\n    padding: 0; */\n    background: inherit;\n    font-size: 18px;\n  }\n`;\n\nconst Title = styled.h2`\n  font-weight: 400;\n  margin: 0;\n  display: flex;\n\n  button {\n    font-size: 18px;\n    border: none;\n    background: inherit;\n    cursor: pointer;\n    margin: auto;\n    padding: 0;\n    font-family: inherit;\n  }\n`;\n\nconst Cards = styled.ul`\n  list-style: none;\n  margin: 0;\n  padding: 0;\n\n  li {\n    margin: 0;\n    padding: 0;\n    z-index: 10;\n  }\n\n  .cards-drop-preview {\n    margin-top: 0.5em;\n    background: rgba(0, 0, 0, 0.2);\n    border-radius: 0.4em;\n  }\n\n  .card-ghost {\n    transition: 0.2s;\n    transform: rotate(7deg);\n    cursor: grabbing;\n  }\n`;\n\nfunction Column({ columnId }: IProps) {\n  const column = useSelector(selectColumn(columnId));\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [inputName, setInputName] = useState(\"\");\n  const dispatch = useDispatch();\n\n  const startEditing = () => {\n    setInputName(column.name);\n    inputRef.current?.focus();\n  };\n\n  const saveName = () => {\n    dispatch(editColumn({ columnId, newName: inputName }));\n    setInputName(\"\");\n  };\n\n  const onCardDrop = ({\n    removedIndex: oldIndex,\n    addedIndex: newIndex,\n    payload: cardId,\n  }: DropResult) => {\n    if ((oldIndex === null && newIndex === null) || oldIndex === newIndex)\n      return;\n\n    // move card in column\n    if (oldIndex !== null && newIndex !== null) {\n      dispatch(moveCard({ columnId, cardId, newIndex }));\n      return;\n    }\n\n    // remove from previous column\n    if (oldIndex !== null) {\n      dispatch(deleteCard({ cardId, columnId, fromCards: false }));\n      return;\n    }\n\n    if (newIndex !== null) {\n      dispatch(tempAddCard({ cardId, columnId, newIndex }));\n      return;\n    }\n  };\n\n  return (\n    <Container>\n      <Header>\n        <span className=\"column-drag-handle\">\n          <GrabberIcon size={18} />\n        </span>\n        {inputName !== \"\" ? (\n          <Input\n            ref={inputRef}\n            onKeyDown={(e) => e.key === \"Enter\" && saveName()}\n            onChange={(e) => setInputName(e.target.value)}\n            value={inputName}\n          />\n        ) : (\n          <Title>\n            <Clickable onClick={startEditing}>{column.name}</Clickable>\n          </Title>\n        )}\n      </Header>\n      <Cards>\n        <DNDContainer\n          groupName=\"column\"\n          getChildPayload={(index) => column.cardsIds[index]}\n          onDrop={onCardDrop}\n          dropPlaceholder={{\n            animationDuration: 200,\n            showOnTop: true,\n            className: \"cards-drop-preview\",\n          }}\n          dragClass=\"card-ghost\"\n        >\n          {column.cardsIds.map((cardId) => (\n            <Draggable key={cardId}>\n              <Card cardId={cardId} />\n            </Draggable>\n          ))}\n        </DNDContainer>\n      </Cards>\n    </Container>\n  );\n}\n\nexport default Column;\n","import React from \"react\";\nimport { styled } from \"linaria/react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n  Container as DNDContainer,\n  Draggable,\n  DropResult,\n} from \"react-smooth-dnd\";\n\nimport { selectBoard, moveColumn } from \"./boardSlice\";\nimport Column from \"./Column\";\n\nconst Container = styled.div<{ background: string }>`\n  background: ${(props) => props.background};\n  height: calc(100vh - 2.6em);\n  width: 100%;\n  overflow-x: auto;\n  overflow-y: hidden;\n`;\n\nconst Columns = styled.ul`\n  padding: 0;\n  margin: 0;\n  list-style: none;\n  min-width: 100%;\n  min-height: 100%;\n  display: inline-flex;\n\n  .columns-drop-preview {\n    background: rgba(0, 0, 0, 0.2);\n    margin: 0.5em;\n    border-radius: 0.4em;\n  }\n`;\n\nfunction Board() {\n  const { columnOrder, background } = useSelector(selectBoard);\n  const dispatch = useDispatch();\n\n  const onColumnDrop = ({ removedIndex, addedIndex }: DropResult) =>\n    removedIndex !== null &&\n    addedIndex !== null &&\n    dispatch(\n      moveColumn({\n        oldIndex: removedIndex,\n        newIndex: addedIndex,\n      })\n    );\n\n  return (\n    <Container background={background}>\n      <Columns>\n        <DNDContainer\n          groupName=\"board\"\n          orientation=\"horizontal\"\n          onDrop={onColumnDrop}\n          dragHandleSelector=\".column-drag-handle\"\n          dropPlaceholder={{\n            animationDuration: 200,\n            showOnTop: true,\n            className: \"columns-drop-preview\",\n          }}\n        >\n          {columnOrder.map((columnId, index) => (\n            <Draggable key={\"column-\" + columnId}>\n              <Column columnId={columnId} index={index} />\n            </Draggable>\n          ))}\n        </DNDContainer>\n      </Columns>\n    </Container>\n  );\n}\n\nexport default () => <Board />;\n"],"sourceRoot":""}