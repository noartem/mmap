{"version":3,"sources":["Loading.tsx","ScrollToTop.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx","utils/useShortcut.ts","utils/GhostButton.ts","features/board/boardSlice.ts","features/notes/notesSlice.ts"],"names":["Container","Spinner","className","Floating","useState","useEffect","doc","document","list","setIsShowing","window","isShowing","onClick","top","behavior","aria-label","size","Home","lazy","Notes","Board","Nav","Links","Logo","Main","push","useHistory","useShortcut","to","fallback","path","render","store","configureStore","reducer","notes","notesReducer","board","boardReducer","ls","localStorage","getItem","preloadedState","JSON","parse","optionalPreloadedState","subscribe","setItem","stringify","getState","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","StrictMode","unstable_system","system","basename","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","keys","cbk","deps","action","callback","useCallback","Mousetrap","bind","unbind","GhostButton","boardSlice","createSlice","name","initialState","cards","moreCards","id","body","tags","oneMoreCard","columns","todo","cardsIds","inProgress","done","columnOrder","background","reducers","addColumn","columnName","column","nanoid","payload","editColumn","columnId","newName","moveColumn","oldIndex","newIndex","length","splice","deleteColumn","forEach","cardId","addCard","cardName","card","editCard","newCard","moveCard","moveCardToColumn","oldColumnId","newColumnId","cardNewIndex","oldColumn","newColumn","cardOldIndex","tempAddCard","deleteCard","fromCards","actions","selectBoard","selectColumn","selectCard","notesSlice","query","search","searchString","addNote","noteName","newNote","updateNote","note","deleteNote","noteId","filter","selectNotesQuery","selectSearchingNotes","includes","selectNote","find"],"mappings":"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","file":"static/js/main.1172c01e.chunk.js","sourcesContent":["import React from \"react\";\nimport { styled } from \"linaria/react\";\n\nconst Container = styled.div`\n  width: 100%;\n  height: 100%;\n`;\n\nconst Spinner = styled.div`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  .lds-roller {\n    margin: auto;\n    display: inline-block;\n    position: relative;\n    width: 16em;\n    height: 16em;\n  }\n  .lds-roller div {\n    background: #00cc99;\n    animation: lds-roller 1.2s cubic-bezier(0.5, 0, 0.5, 1) infinite;\n    transform-origin: 8em 8em;\n  }\n  .lds-roller div:after {\n    content: \" \";\n    display: block;\n    position: absolute;\n    width: 1.4em;\n    height: 1.4em;\n    border-radius: 50%;\n    background: #fff;\n    margin: -0.8em 0 0 -0.8em;\n    background: #006dff;\n  }\n  .lds-roller div:nth-child(1) {\n    animation-delay: -0.036s;\n  }\n  .lds-roller div:nth-child(1):after {\n    top: 12.6em;\n    left: 12.6em;\n  }\n  .lds-roller div:nth-child(2) {\n    animation-delay: -0.072s;\n  }\n  .lds-roller div:nth-child(2):after {\n    top: 13.6em;\n    left: 11.2em;\n  }\n  .lds-roller div:nth-child(3) {\n    animation-delay: -0.108s;\n  }\n  .lds-roller div:nth-child(3):after {\n    top: 14.2em;\n    left: 9.6em;\n  }\n  .lds-roller div:nth-child(4) {\n    animation-delay: -0.144s;\n  }\n  .lds-roller div:nth-child(4):after {\n    top: 14.4em;\n    left: 8em;\n  }\n  .lds-roller div:nth-child(5) {\n    animation-delay: -0.18s;\n  }\n  .lds-roller div:nth-child(5):after {\n    top: 14.2em;\n    left: 6.4em;\n  }\n  .lds-roller div:nth-child(6) {\n    animation-delay: -0.216s;\n  }\n  .lds-roller div:nth-child(6):after {\n    top: 13.6em;\n    left: 4.8em;\n  }\n  .lds-roller div:nth-child(7) {\n    animation-delay: -0.252s;\n  }\n  .lds-roller div:nth-child(7):after {\n    top: 12.6em;\n    left: 3.4em;\n  }\n  .lds-roller div:nth-child(8) {\n    animation-delay: -0.288s;\n  }\n  .lds-roller div:nth-child(8):after {\n    top: 11.2em;\n    left: 2.4em;\n  }\n  @keyframes lds-roller {\n    0% {\n      transform: rotate(0deg);\n    }\n    100% {\n      transform: rotate(360deg);\n    }\n  }\n`;\n\nfunction Loading() {\n  return (\n    <Container>\n      <Spinner>\n        <div className=\"lds-roller\">\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n        </div>\n      </Spinner>\n    </Container>\n  );\n}\n\nexport default Loading;\n","import React, { useState, useEffect } from \"react\";\nimport { styled } from \"linaria/react\";\nimport { ChevronUpIcon } from \"@primer/octicons-react\";\n\nimport { GhostButton } from \"./utils\";\n\nconst Floating = styled.div`\n  @media (min-width: 922px) {\n    display: none;\n  }\n\n  position: fixed;\n  bottom: 1rem;\n  right: 1rem;\n  z-index: 99;\n\n  button {\n    display: flex;\n    cursor: pointer;\n    border-radius: 50%;\n    width: 2.8rem;\n    height: 2.8rem;\n    /* color: rgba(85, 97, 125, 0.6) !important; */\n    background: rgba(93, 104, 156, 0.15) !important;\n    transition: all 0.3s;\n\n    svg {\n      color: rgba(85, 97, 125, 0.6);\n      margin: auto;\n    }\n  }\n`;\n\nfunction ScrollToTop() {\n  const [isShowing, setIsShowing] = useState(false);\n\n  useEffect(() => {\n    const doc = document.documentElement;\n    const list = () =>\n      setIsShowing(\n        (window.pageYOffset || doc.scrollTop) - (doc.clientTop || 0) >= 200\n      );\n\n    window.addEventListener(\"scroll\", list);\n\n    return () => {\n      window.removeEventListener(\"scroll\", list);\n    };\n  }, [setIsShowing]);\n\n  const scroll = () => window.scrollTo({ top: 0, behavior: \"smooth\" });\n\n  return (\n    <Floating>\n      {isShowing && (\n        <GhostButton onClick={scroll} aria-label=\"Scroll to top\">\n          <ChevronUpIcon size={22} />\n        </GhostButton>\n      )}\n    </Floating>\n  );\n}\n\nexport default ScrollToTop;\n","import React, { Suspense, lazy } from \"react\";\r\nimport { Switch, Route, Link, useHistory } from \"react-router-dom\";\r\nimport { styled } from \"linaria/react\";\r\nimport { BookIcon } from \"@primer/octicons-react\";\r\n\r\nimport { useShortcut } from \"./utils\";\r\nimport Loading from \"./Loading\";\r\nimport ScrollToTop from \"./ScrollToTop\";\r\n\r\nconst Home = lazy(() => import(\"./Home\"));\r\nconst Notes = lazy(() => import(\"./features/notes/Notes\"));\r\nconst Board = lazy(() => import(\"./features/board/Board\"));\r\n\r\nconst Nav = styled.nav`\r\n  display: flex;\r\n  padding: 0 0.75em 0 0;\r\n  border-bottom: 1px solid #006dff;\r\n  overflow-y: auto;\r\n  background: #f8f9fa !important;\r\n\r\n  a {\r\n    color: #006dff;\r\n    text-decoration: none;\r\n\r\n    &:focus,\r\n    &:hover,\r\n    &:visited {\r\n      color: #006dff;\r\n    }\r\n  }\r\n`;\r\n\r\nconst Links = styled.ul`\r\n  display: flex;\r\n\r\n  list-style: none;\r\n  margin: auto 0.75em;\r\n  padding: 0;\r\n\r\n  li {\r\n    margin: 0;\r\n    padding: 0.5em 0.75em;\r\n  }\r\n`;\r\n\r\nconst Logo = styled.div`\r\n  font-size: 1.17em;\r\n  background: #006dff;\r\n  margin: 0;\r\n  padding: 0.4em 0.8em 0.3em 0.8em;\r\n  a {\r\n    color: white !important;\r\n    display: flex;\r\n  }\r\n`;\r\n\r\nconst Main = styled.main`\r\n  height: calc(100vh - 2.6em);\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  & > * {\r\n    flex-grow: 1;\r\n  }\r\n`;\r\n\r\nfunction App() {\r\n  const { push } = useHistory();\r\n\r\n  useShortcut(\"ctrl+shift+1\", () => push(\"/notes\"), [push]);\r\n  useShortcut(\"ctrl+shift+2\", () => push(\"/board\"), [push]);\r\n\r\n  return (\r\n    <div>\r\n      <Nav>\r\n        <Logo>\r\n          <Link to=\"/\">\r\n            <BookIcon size={28} />\r\n          </Link>\r\n        </Logo>\r\n        <Links>\r\n          <li>\r\n            <Link to=\"/notes\">Notes</Link>\r\n          </li>\r\n          <li>\r\n            <Link to=\"/board\">Board</Link>\r\n          </li>\r\n        </Links>\r\n      </Nav>\r\n\r\n      <Main>\r\n        <Suspense fallback={<Loading />}>\r\n          <Switch>\r\n            <Route path=\"/notes\" render={() => <Notes />} />\r\n            <Route path=\"/board\" render={() => <Board />} />\r\n            <Route path=\"/\" render={() => <Home />} />\r\n          </Switch>\r\n        </Suspense>\r\n      </Main>\r\n\r\n      <ScrollToTop />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore, ThunkAction, Action } from \"@reduxjs/toolkit\";\r\nimport notesReducer from \"../features/notes/notesSlice\";\r\nimport boardReducer from \"../features/board/boardSlice\";\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    notes: notesReducer,\r\n    board: boardReducer,\r\n  },\r\n  ...optionalPreloadedState(),\r\n});\r\n\r\nfunction optionalPreloadedState() {\r\n  const ls = localStorage.getItem(\"redux-store\");\r\n  return ls === \"\" || ls === null ? {} : { preloadedState: JSON.parse(ls) };\r\n}\r\n\r\nstore.subscribe(() =>\r\n  localStorage.setItem(\"redux-store\", JSON.stringify(store.getState()))\r\n);\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport { store } from \"./app/store\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport { Provider as ReduxProvider } from \"react-redux\";\r\nimport { Provider as ReakitProvider } from \"reakit\";\r\nimport * as system from \"reakit-system-bootstrap\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ReduxProvider store={store}>\r\n      <ReakitProvider unstable_system={system}>\r\n        <Router basename=\"/mmap/#\">\r\n          <App />\r\n        </Router>\r\n      </ReakitProvider>\r\n    </ReduxProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n","import { useEffect, useCallback } from \"react\";\nimport Mousetrap from \"mousetrap\";\n\nexport function useShortcut(\n  keys: string | string[],\n  cbk: (e: ExtendedKeyboardEvent, combo: string) => any,\n  deps?: any[],\n  action?: string\n) {\n  const callback = useCallback(cbk, deps || []);\n\n  useEffect(() => {\n    Mousetrap.bind(keys, callback, action);\n\n    return () => {\n      Mousetrap.unbind(keys);\n    };\n  }, [keys, callback, action]);\n}\n","import { styled } from \"linaria/react\";\nimport { Clickable } from \"reakit/Clickable\";\n\nexport const GhostButton = styled(Clickable)`\n  display: flex;\n  width: 100%;\n  border: none !important;\n  padding: 0;\n  background: none !important;\n  color: inherit !important;\n  cursor: pointer;\n  font-size: 14px;\n  font-weight: 600;\n  text-align: left;\n`;\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\nimport { RootState } from \"../../app/store\";\nimport { Columns, Card, Cards } from \"./column\";\nimport { nanoid } from \"nanoid\";\n\ninterface BoardState {\n  cards: Cards;\n  columns: Columns;\n  columnOrder: string[];\n  background: string;\n}\n\nconst initialState: BoardState = {\n  cards: {\n    moreCards: {\n      id: \"moreCards\",\n      name: \"Add more cards\",\n      body: \"# Add more cards \\n\\n ---\",\n      tags: [],\n    },\n    oneMoreCard: {\n      id: \"oneMoreCard\",\n      name: \"One more card\",\n      body: \"# 11111 \\n\\n ---\",\n      tags: [],\n    },\n  },\n  columns: {\n    todo: { id: \"todo\", name: \"TODO\", cardsIds: [\"moreCards\", \"oneMoreCard\"] },\n    inProgress: { id: \"inProgress\", name: \"IN PROGRESS\", cardsIds: [] },\n    done: { id: \"done\", name: \"DONE\", cardsIds: [] },\n  },\n  columnOrder: [\"todo\", \"inProgress\", \"done\"],\n  background: \"#00CC99\",\n};\n\nexport const boardSlice = createSlice({\n  name: \"board\",\n  initialState,\n  reducers: {\n    addColumn(state, columnName: PayloadAction<string>) {\n      const column = {\n        id: nanoid(),\n        name: columnName.payload,\n        cardsIds: [],\n      };\n\n      state.columns[column.id] = column;\n      state.columnOrder.push(column.id);\n    },\n    editColumn(\n      state,\n      {\n        payload: { columnId, newName },\n      }: PayloadAction<{ columnId: string; newName: string }>\n    ) {\n      if (state.columns[columnId]) {\n        state.columns[columnId].name = newName;\n      }\n    },\n    moveColumn(\n      state,\n      {\n        payload: { oldIndex, newIndex },\n      }: PayloadAction<{ oldIndex: number; newIndex: number }>\n    ) {\n      if (state.columnOrder.length <= oldIndex) return;\n\n      const columnId = state.columnOrder[oldIndex];\n\n      state.columnOrder.splice(oldIndex, 1); // remove\n      state.columnOrder.splice(newIndex, 0, columnId); // add\n    },\n    deleteColumn(state, columnId: PayloadAction<string>) {\n      state.columnOrder.splice(state.columnOrder.indexOf(columnId.payload), 1);\n\n      state.columns[columnId.payload].cardsIds.forEach((cardId) => {\n        delete state.cards[cardId];\n      });\n\n      delete state.columns[columnId.payload];\n    },\n    addCard(\n      state,\n      {\n        payload: { cardName, columnId },\n      }: PayloadAction<{ cardName: string; columnId: string }>\n    ) {\n      const column = state.columns[columnId];\n\n      if (column) {\n        const card = {\n          id: nanoid(),\n          name: cardName,\n          body: \"\",\n          tags: [],\n        };\n\n        state.cards[card.id] = card;\n        column.cardsIds.push(card.id);\n      }\n    },\n    editCard(state, newCard: PayloadAction<Card>) {\n      const card = state.cards[newCard.payload.id];\n\n      if (card) {\n        card.name = newCard.payload.name;\n        card.body = newCard.payload.body;\n        card.tags = newCard.payload.tags;\n      }\n    },\n    moveCard(\n      state,\n      {\n        payload: { columnId, cardId, newIndex },\n      }: PayloadAction<{\n        columnId: string;\n        cardId: string;\n        newIndex: number;\n      }>\n    ) {\n      const column = state.columns[columnId];\n\n      if (column) {\n        const oldIndex = column.cardsIds.indexOf(cardId);\n\n        if (oldIndex !== -1) {\n          column.cardsIds.splice(oldIndex, 1);\n          column.cardsIds.splice(newIndex, 0, cardId);\n        }\n      }\n    },\n    moveCardToColumn(\n      state,\n      {\n        payload: { oldColumnId, newColumnId, cardId, cardNewIndex },\n      }: PayloadAction<{\n        oldColumnId: string;\n        newColumnId: string;\n        cardId: string;\n        cardNewIndex: number;\n      }>\n    ) {\n      const oldColumn = state.columns[oldColumnId];\n      const newColumn = state.columns[newColumnId];\n\n      if (oldColumn && newColumn) {\n        const cardOldIndex = oldColumn.cardsIds.indexOf(cardId);\n\n        if (cardOldIndex !== -1) {\n          oldColumn.cardsIds.splice(cardOldIndex, 1);\n          newColumn.cardsIds.splice(cardNewIndex, 0, cardId);\n        }\n      }\n    },\n    tempAddCard(\n      state,\n      {\n        payload: { cardId, columnId, newIndex },\n      }: PayloadAction<{\n        cardId: string;\n        columnId: string;\n        newIndex: number;\n      }>\n    ) {\n      const column = state.columns[columnId];\n      const card = state.cards[cardId];\n\n      if (column && card) {\n        column.cardsIds.splice(newIndex, 0, cardId);\n      }\n    },\n    deleteCard(\n      state,\n      {\n        payload: { cardId, columnId, fromCards },\n      }: PayloadAction<{\n        cardId: string;\n        columnId: string;\n        fromCards: boolean;\n      }>\n    ) {\n      const column = state.columns[columnId];\n      const card = state.cards[cardId];\n\n      if (column && card) {\n        if (fromCards) delete state.cards[cardId];\n        column.cardsIds.splice(column.cardsIds.indexOf(cardId), 1);\n      }\n    },\n  },\n});\n\nexport const {\n  addColumn,\n  editColumn,\n  moveColumn,\n  deleteColumn,\n  addCard,\n  editCard,\n  moveCard,\n  tempAddCard,\n  deleteCard,\n} = boardSlice.actions;\n\nexport const selectBoard = (state: RootState) => state.board;\n\nexport const selectColumn = (columnId: string) => (state: RootState) =>\n  state.board.columns[columnId];\n\nexport const selectCard = (cardId: string) => (state: RootState) =>\n  state.board.cards[cardId];\n\nexport default boardSlice.reducer;\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { nanoid } from \"nanoid\";\n\nimport { RootState } from \"../../app/store\";\nimport { Note } from \"./note\";\n\ninterface NotesState {\n  query: string;\n  notes: Array<Note>;\n}\n\nconst initialState: NotesState = {\n  query: \"\",\n  notes: [],\n};\n\nexport const notesSlice = createSlice({\n  name: \"notes\",\n  initialState,\n  reducers: {\n    search: (state, searchString: PayloadAction<string>) => {\n      state.query = searchString.payload;\n    },\n    addNote: (state, noteName: PayloadAction<string>) => {\n      const newNote = {\n        id: nanoid(8),\n        name: noteName.payload,\n        body: `# ${noteName.payload}!\\n\\nSome *text* goes here...`,\n      };\n\n      state.notes.push(newNote);\n      state.query = \"\";\n    },\n    updateNote: (state, newNote: PayloadAction<Note>) => {\n      for (const note of state.notes) {\n        if (note.id === newNote.payload.id) {\n          note.id = newNote.payload.id;\n          note.name = newNote.payload.name;\n          note.body = newNote.payload.body;\n          break;\n        }\n      }\n    },\n    deleteNote: (state, noteId: PayloadAction<string>) => {\n      state.notes = state.notes.filter((note) => note.id !== noteId.payload);\n    },\n  },\n});\n\nexport const { search, addNote, updateNote, deleteNote } = notesSlice.actions;\n\nexport const selectNotesQuery = (state: RootState) => state.notes.query;\n\nexport const selectSearchingNotes = (state: RootState) =>\n  state.notes.notes.filter((note) => note.name.includes(state.notes.query));\n\nexport const selectNote = (noteId: string) => (state: RootState) =>\n  state.notes.notes.find((note) => note.id === noteId);\n\nexport default notesSlice.reducer;\n"],"sourceRoot":""}