{"version":3,"sources":["../node_modules/refractor/lang/jsdoc.js","../node_modules/refractor/lang/javadoclike.js"],"names":["refractorJavadoclike","require","jsdoc","Prism","register","javascript","languages","type","source","parameterPrefix","extend","parameter","pattern","RegExp","lookbehind","inside","punctuation","insertBefore","code","alias","example","javadoclike","addSupport","module","exports","displayName","aliases","javaDocLike","keyword","Object","defineProperty","value","docLanguage","forEach","lang","callback","grammar","token","definition","Array","isArray","i","l","length","docCommentSupport","rest"],"mappings":"kGACA,IAAIA,EAAuBC,EAAQ,IAInC,SAASC,EAAMC,GACbA,EAAMC,SAASJ,GACd,SAAWG,GACV,IAAIE,EAAaF,EAAMG,UAAUD,WAC7BE,EAAO,qCAAqCC,OAC5CC,EACF,2CAA6CF,EAAO,UACtDJ,EAAMG,UAAUJ,MAAQC,EAAMG,UAAUI,OAAO,cAAe,CAC5DC,UAAW,CAETC,QAASC,OAAOJ,EAAkB,6BAA6BD,QAC/DM,YAAY,EACZC,OAAQ,CACNC,YAAa,SAInBb,EAAMG,UAAUW,aAAa,QAAS,UAAW,CAC/C,qBAAsB,CAEpBL,QAASC,OACPJ,EAAkB,8CAA8CD,QAElEM,YAAY,EACZC,OAAQ,CACNJ,UAAW,CACTC,QAAS,2BACTE,YAAY,EACZC,OAAQ,CACNC,YAAa,OAGjBE,KAAM,CACJN,QAAS,oBACTE,YAAY,EACZC,OAAQV,EACRc,MAAO,uBAETH,YAAa,WAGjB,aAAc,CACZ,CACEJ,QAASC,OAAO,gBAAkBN,GAClCO,YAAY,EACZC,OAAQ,CACNC,YAAa,sBAGjB,CACEJ,QAAS,oFACTE,YAAY,EACZC,OAAQ,CACNC,YAAa,QAInBI,QAAS,CACPR,QAAS,mDACTE,YAAY,EACZC,OAAQ,CACNG,KAAM,CACJN,QAAS,uBACTE,YAAY,EACZC,OAAQV,EACRc,MAAO,2BAKfhB,EAAMG,UAAUe,YAAYC,WAAW,aAAcnB,EAAMG,UAAUJ,OApEtE,CAqEEC,GA1ELoB,EAAOC,QAAUtB,EACjBA,EAAMuB,YAAc,QACpBvB,EAAMwB,QAAU,I,gCCChB,SAASL,EAAYlB,IAClB,SAAWA,GACV,IAAIwB,EAAexB,EAAMG,UAAUe,YAAc,CAC/CV,UAAW,CACTC,QAAS,8DACTE,YAAY,GAEdc,QAAS,CAGPhB,QAAS,qDACTE,YAAY,GAEdE,YAAa,QAgEfa,OAAOC,eAAeH,EAAa,aAAc,CAC/CI,MAdF,SAAoBzB,EAAW0B,GACJ,kBAAd1B,IACTA,EAAY,CAACA,IAEfA,EAAU2B,SAAQ,SAAUC,IA/C9B,SAA2BA,EAAMC,GAC/B,IACIC,EAAUjC,EAAMG,UAAU4B,GAC9B,GAAKE,EAAL,CAGA,IAAIC,EAAQD,EALI,eAMhB,IAAKC,EAAO,CAEV,IAAIC,EAAa,CACjBA,cAAwB,CACtB1B,QAAS,wCACTE,YAAY,EACZK,MAAO,YAGTkB,GADAD,EAAUjC,EAAMG,UAAUW,aAAaiB,EAAM,UAAWI,IAd1C,eAuBhB,GANID,aAAiBxB,SAEnBwB,EAAQD,EAnBM,eAmBe,CAC3BxB,QAASyB,IAGTE,MAAMC,QAAQH,GAChB,IAAK,IAAII,EAAI,EAAGC,EAAIL,EAAMM,OAAQF,EAAIC,EAAGD,IACnCJ,EAAMI,aAAc5B,SACtBwB,EAAMI,GAAK,CACT7B,QAASyB,EAAMI,KAGnBN,EAASE,EAAMI,SAGjBN,EAASE,IAcTO,CAAkBV,GAAM,SAAUtB,GAC3BA,EAAQG,SACXH,EAAQG,OAAS,IAEnBH,EAAQG,OAAO8B,KAAOb,WAO5BL,EAAYL,WAAW,CAAC,OAAQ,aAAc,OAAQK,GA/EvD,CAgFExB,GApFLoB,EAAOC,QAAUH,EACjBA,EAAYI,YAAc,cAC1BJ,EAAYK,QAAU","file":"static/js/react-syntax-highlighter_languages_refractor_jsdoc.5376a4c1.chunk.js","sourcesContent":["'use strict'\nvar refractorJavadoclike = require('./javadoclike.js')\nmodule.exports = jsdoc\njsdoc.displayName = 'jsdoc'\njsdoc.aliases = []\nfunction jsdoc(Prism) {\n  Prism.register(refractorJavadoclike)\n  ;(function (Prism) {\n    var javascript = Prism.languages.javascript\n    var type = /{(?:[^{}]|{(?:[^{}]|{[^{}]*})*})+}/.source\n    var parameterPrefix =\n      '(@(?:param|arg|argument|property)\\\\s+(?:' + type + '\\\\s+)?)'\n    Prism.languages.jsdoc = Prism.languages.extend('javadoclike', {\n      parameter: {\n        // @param {string} foo - foo bar\n        pattern: RegExp(parameterPrefix + /[$\\w\\xA0-\\uFFFF.]+(?=\\s|$)/.source),\n        lookbehind: true,\n        inside: {\n          punctuation: /\\./\n        }\n      }\n    })\n    Prism.languages.insertBefore('jsdoc', 'keyword', {\n      'optional-parameter': {\n        // @param {string} [baz.foo=\"bar\"] foo bar\n        pattern: RegExp(\n          parameterPrefix + /\\[[$\\w\\xA0-\\uFFFF.]+(?:=[^[\\]]+)?\\](?=\\s|$)/.source\n        ),\n        lookbehind: true,\n        inside: {\n          parameter: {\n            pattern: /(^\\[)[$\\w\\xA0-\\uFFFF\\.]+/,\n            lookbehind: true,\n            inside: {\n              punctuation: /\\./\n            }\n          },\n          code: {\n            pattern: /(=)[\\s\\S]*(?=\\]$)/,\n            lookbehind: true,\n            inside: javascript,\n            alias: 'language-javascript'\n          },\n          punctuation: /[=[\\]]/\n        }\n      },\n      'class-name': [\n        {\n          pattern: RegExp('(@[a-z]+\\\\s+)' + type),\n          lookbehind: true,\n          inside: {\n            punctuation: /[.,:?=<>|{}()[\\]]/\n          }\n        },\n        {\n          pattern: /(@(?:augments|extends|class|interface|memberof!?|this)\\s+)[A-Z]\\w*(?:\\.[A-Z]\\w*)*/,\n          lookbehind: true,\n          inside: {\n            punctuation: /\\./\n          }\n        }\n      ],\n      example: {\n        pattern: /(@example\\s+)[^@]+?(?=\\s*(?:\\*\\s*)?(?:@\\w|\\*\\/))/,\n        lookbehind: true,\n        inside: {\n          code: {\n            pattern: /^(\\s*(?:\\*\\s*)?).+$/m,\n            lookbehind: true,\n            inside: javascript,\n            alias: 'language-javascript'\n          }\n        }\n      }\n    })\n    Prism.languages.javadoclike.addSupport('javascript', Prism.languages.jsdoc)\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = javadoclike\njavadoclike.displayName = 'javadoclike'\njavadoclike.aliases = []\nfunction javadoclike(Prism) {\n  ;(function (Prism) {\n    var javaDocLike = (Prism.languages.javadoclike = {\n      parameter: {\n        pattern: /(^\\s*(?:\\/{3}|\\*|\\/\\*\\*)\\s*@(?:param|arg|arguments)\\s+)\\w+/m,\n        lookbehind: true\n      },\n      keyword: {\n        // keywords are the first word in a line preceded be an `@` or surrounded by curly braces.\n        // @word, {@word}\n        pattern: /(^\\s*(?:\\/{3}|\\*|\\/\\*\\*)\\s*|\\{)@[a-z][a-zA-Z-]+\\b/m,\n        lookbehind: true\n      },\n      punctuation: /[{}]/\n    })\n    /**\n     * Adds doc comment support to the given language and calls a given callback on each doc comment pattern.\n     *\n     * @param {string} lang the language add doc comment support to.\n     * @param {(pattern: {inside: {rest: undefined}}) => void} callback the function called with each doc comment pattern as argument.\n     */\n    function docCommentSupport(lang, callback) {\n      var tokenName = 'doc-comment'\n      var grammar = Prism.languages[lang]\n      if (!grammar) {\n        return\n      }\n      var token = grammar[tokenName]\n      if (!token) {\n        // add doc comment: /** */\n        var definition = {}\n        definition[tokenName] = {\n          pattern: /(^|[^\\\\])\\/\\*\\*[^/][\\s\\S]*?(?:\\*\\/|$)/,\n          lookbehind: true,\n          alias: 'comment'\n        }\n        grammar = Prism.languages.insertBefore(lang, 'comment', definition)\n        token = grammar[tokenName]\n      }\n      if (token instanceof RegExp) {\n        // convert regex to object\n        token = grammar[tokenName] = {\n          pattern: token\n        }\n      }\n      if (Array.isArray(token)) {\n        for (var i = 0, l = token.length; i < l; i++) {\n          if (token[i] instanceof RegExp) {\n            token[i] = {\n              pattern: token[i]\n            }\n          }\n          callback(token[i])\n        }\n      } else {\n        callback(token)\n      }\n    }\n    /**\n     * Adds doc-comment support to the given languages for the given documentation language.\n     *\n     * @param {string[]|string} languages\n     * @param {Object} docLanguage\n     */\n    function addSupport(languages, docLanguage) {\n      if (typeof languages === 'string') {\n        languages = [languages]\n      }\n      languages.forEach(function (lang) {\n        docCommentSupport(lang, function (pattern) {\n          if (!pattern.inside) {\n            pattern.inside = {}\n          }\n          pattern.inside.rest = docLanguage\n        })\n      })\n    }\n    Object.defineProperty(javaDocLike, 'addSupport', {\n      value: addSupport\n    })\n    javaDocLike.addSupport(['java', 'javascript', 'php'], javaDocLike)\n  })(Prism)\n}\n"],"sourceRoot":""}