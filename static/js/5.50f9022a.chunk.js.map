{"version":3,"sources":["../node_modules/reakit/es/Button/Button.js","features/notes/ShortcutsInfo.tsx","features/notes/Search.tsx","features/notes/Nav.tsx","features/notes/Body.tsx","features/notes/Notes.tsx"],"names":["useButton","createHook","name","compose","useClickable","useProps","_","_ref","htmlRef","ref","htmlProps","_objectWithoutPropertiesLoose","useRef","_React$useState","useState","undefined","role","setRole","_React$useState2","type","setType","useEffect","element","current","isButton","tagName","_objectSpread2","useForkRef","Button","createComponent","as","memo","useHook","P","ShortcutsInfo","Header","addNote","searchInput","add","a","setQuery","useShortcut","placeholder","value","onChange","e","focusable","disabled","query","onClick","Links","NavLink","notes","useSelector","selectSearchingNotes","push","useHistory","useShcut","i","String","url","useNoteShortcuts","note","title","key","component","to","Container","Textarea","Nav","Title","Controls","noteId","useParams","selectNote","dispatch","useDispatch","bodyInput","notEditing","editingBody","editNote","setEditingName","setEditingBody","saveNote","updateNote","id","body","tryDeleteNote","window","deleteNote","closeNote","unstable_system","palette","text","Section","useRouteMatch","goAddNote","className","exact","path"],"mappings":"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","file":"static/js/5.50f9022a.chunk.js","sourcesContent":["import { _ as _objectWithoutPropertiesLoose, a as _objectSpread2 } from '../_rollupPluginBabelHelpers-1f0bf8c2.js';\nimport { createComponent } from 'reakit-system/createComponent';\nimport { createHook } from 'reakit-system/createHook';\nimport 'reakit-utils/shallowEqual';\nimport '../Box/Box.js';\nimport { useRef, useState, useEffect } from 'react';\nimport { useForkRef } from 'reakit-utils/useForkRef';\nimport { isButton } from 'reakit-utils/isButton';\nimport { warning } from 'reakit-warning';\nimport 'reakit-utils/useLiveRef';\nimport 'reakit-utils/isSelfTarget';\nimport 'reakit-utils/useIsomorphicEffect';\nimport 'reakit-utils/hasFocusWithin';\nimport 'reakit-utils/isPortalEvent';\nimport 'reakit-utils/getActiveElement';\nimport 'reakit-utils/tabbable';\nimport '../Tabbable/Tabbable.js';\nimport { useClickable } from '../Clickable/Clickable.js';\n\nvar useButton = createHook({\n  name: \"Button\",\n  compose: useClickable,\n  useProps: function useProps(_, _ref) {\n    var htmlRef = _ref.ref,\n        htmlProps = _objectWithoutPropertiesLoose(_ref, [\"ref\"]);\n\n    var ref = useRef(null);\n\n    var _React$useState = useState(undefined),\n        role = _React$useState[0],\n        setRole = _React$useState[1];\n\n    var _React$useState2 = useState(\"button\"),\n        type = _React$useState2[0],\n        setType = _React$useState2[1];\n\n    useEffect(function () {\n      var element = ref.current;\n\n      if (!element) {\n        process.env.NODE_ENV !== \"production\" ? warning(true, \"Can't determine whether the element is a native button because `ref` wasn't passed to the component\", \"See https://reakit.io/docs/button\") : void 0;\n        return;\n      }\n\n      if (!isButton(element)) {\n        if (element.tagName !== \"A\") {\n          setRole(\"button\");\n        }\n\n        setType(undefined);\n      }\n    }, []);\n    return _objectSpread2({\n      ref: useForkRef(ref, htmlRef),\n      role: role,\n      type: type\n    }, htmlProps);\n  }\n});\nvar Button = createComponent({\n  as: \"button\",\n  memo: true,\n  useHook: useButton\n});\n\nexport { Button, useButton };\n","import React from \"react\";\nimport { styled } from \"linaria/react\";\n\nconst P = styled.p`\n  padding: 1em 1.5em;\n`;\n\nexport default function ShortcutsInfo() {\n  return (\n    <div>\n      <P>\n        <b> Alt + S</b> focus search input\n      </P>\n      <P>\n        <b> Control + Alt + $number</b> open <i>$number</i> note\n      </P>\n      <P>\n        <b> Ctrl + B</b> toggle edit mode\n      </P>\n      <P>\n        <b> Alt + I </b> delete note\n      </P>\n      <P>\n        <b> Escape </b> close note\n      </P>\n    </div>\n  );\n}\n","import React, { useRef } from \"react\";\nimport { Button } from \"reakit/Button\";\nimport { Input } from \"reakit/Input\";\nimport { styled } from \"linaria/react\";\n\nimport { useShortcut } from \"../../utils\";\n\nconst Header = styled.header`\n  display: flex;\n  padding: 0.5em 0.75em;\n  height: 2.4em;\n\n  border-bottom: 1px solid #006dff;\n\n  input {\n    border: none;\n    margin: 0 0.5em 0 0 !important;\n  }\n`;\n\ninterface IProps {\n  query: string;\n  setQuery: (query: string) => void;\n  addNote: (query: string) => void;\n}\n\nfunction Search({ query, setQuery, addNote }: IProps) {\n  const searchInput = useRef<HTMLInputElement>(null);\n\n  const add = async () => {\n    await addNote(query);\n    setQuery(\"\");\n  };\n\n  useShortcut(\"alt+s\", () => searchInput.current?.focus(), [searchInput]);\n\n  return (\n    <Header>\n      <Input\n        ref={searchInput}\n        name=\"search\"\n        placeholder=\"Search... (Alt + S to focus)\"\n        value={query}\n        onChange={(e) => setQuery(e.target.value)}\n      />\n      <Button focusable disabled={query === \"\"} onClick={add}>\n        Add\n      </Button>\n    </Header>\n  );\n}\n\nexport default Search;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { styled } from \"linaria/react\";\nimport { Link, useHistory } from \"react-router-dom\";\n\nimport { useShortcut } from \"../../utils\";\n\nimport { selectSearchingNotes } from \"./notesSlice\";\n\nconst Links = styled.ul`\n  width: 100%;\n  overflow-y: auto;\n  overflow-x: hidden;\n\n  @media (max-width: 767px) {\n    max-height: 28vh;\n  }\n\n  @media (min-width: 767px) {\n    height: calc(100vh - 6.07em);\n  }\n\n  margin: 0;\n  padding: 0;\n\n  li {\n    list-style: none;\n  }\n`;\n\nconst NavLink = styled.a`\n  display: block;\n  padding: 0.5em 0.75em;\n\n  overflow: hidden;\n  text-overflow: ellipsis;\n  font-size: 18px;\n  text-decoration: none;\n  text-align: left;\n  color: inherit;\n  transition: 0.1s;\n\n  &:focus,\n  &:hover,\n  &:active {\n    background: #006dff;\n    color: white;\n  }\n`;\n\nfunction useNoteShortcuts({ url, query }: IProps) {\n  const notes = useSelector(selectSearchingNotes(query));\n  const { push } = useHistory();\n\n  const useShcut = (i: number) =>\n    useShortcut(\n      `ctrl+alt+${String(i + 1)}`,\n      () => (i >= notes.length ? null : push(`${url}/${notes[i].id}`)),\n      [notes, push]\n    );\n\n  useShcut(0);\n  useShcut(1);\n  useShcut(2);\n  useShcut(3);\n  useShcut(4);\n  useShcut(5);\n  useShcut(6);\n  useShcut(7);\n  useShcut(8);\n  useShcut(9);\n}\n\ninterface IProps {\n  url: string;\n  query: string;\n}\n\nfunction Nav({ url, query }: IProps) {\n  const notes = useSelector(selectSearchingNotes(query));\n\n  useNoteShortcuts({ url, query });\n\n  return (\n    <div>\n      <Links>\n        {notes.map((note) => (\n          <li title={note.name} key={note.id}>\n            <Link component={NavLink} to={`${url}/${note.id}`}>\n              {note.name}\n            </Link>\n          </li>\n        ))}\n      </Links>\n    </div>\n  );\n}\n\nexport default Nav;\n","import React, { useState, useRef } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { styled } from \"linaria/react\";\nimport { Button } from \"reakit/Button\";\nimport { Input } from \"reakit/Input\";\nimport { useParams, useHistory } from \"react-router-dom\";\n\nimport { useShortcut } from \"../../utils\";\n\nimport { selectNote, updateNote, deleteNote } from \"./notesSlice\";\nimport { Markdown } from \"../../components\";\n\nconst Container = styled.div`\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst Textarea = styled.textarea`\n  width: 100%;\n  height: 100%;\n  border: none;\n  padding: 0.5em 0.75em;\n`;\n\nconst Nav = styled.nav`\n  top: 0;\n  position: sticky;\n  padding: 0.5em 0.75em;\n\n  background: #fff;\n  border-bottom: 1px solid #006dff;\n\n  display: flex;\n`;\n\nconst Title = styled.h2`\n  overflow: hidden;\n  text-overflow: ellipsis;\n  margin: auto 0;\n`;\n\nconst Controls = styled.div`\n  margin-left: auto;\n  display: flex;\n\n  button {\n    margin-left: 0.5em;\n  }\n`;\n\nfunction Body() {\n  const { noteId } = useParams<{ noteId: string }>();\n  const note = useSelector(selectNote(noteId));\n\n  const { push } = useHistory();\n  const dispatch = useDispatch();\n\n  const [editingBody, setEditingBody] = useState(\"\");\n  const [editingName, setEditingName] = useState(\"\");\n  const bodyInput = useRef<HTMLTextAreaElement>(null);\n\n  const notEditing = editingBody === \"\";\n\n  const editNote = () => {\n    if (!note) return;\n\n    setEditingName(note.name);\n    setEditingBody(note.body);\n    bodyInput.current?.focus();\n  };\n\n  const saveNote = () => {\n    if (!note) return;\n\n    dispatch(updateNote({ id: note.id, name: editingName, body: editingBody }));\n    setEditingName(\"\");\n    setEditingBody(\"\");\n  };\n\n  const tryDeleteNote = () => {\n    if (note && window.confirm(\"Are you sure?\")) dispatch(deleteNote(note.id));\n  };\n\n  const closeNote = () => push(\"/notes\");\n\n  useShortcut(\"ctrl+b\", () => (notEditing ? editNote() : saveNote()), [\n    note,\n    editingName,\n    editingBody,\n    bodyInput,\n  ]);\n\n  useShortcut(\"alt+i\", tryDeleteNote, []);\n\n  useShortcut(\"escape\", closeNote, []);\n\n  if (!note) {\n    closeNote();\n    return <p>Redirecting...</p>;\n  }\n\n  return (\n    <Container>\n      <Nav>\n        {notEditing ? (\n          <Title title={note.name}>{note.name}</Title>\n        ) : (\n          <Input\n            value={editingName}\n            onChange={(e) => setEditingName(e.target.value)}\n          />\n        )}\n\n        <Controls>\n          {notEditing ? (\n            <>\n              <Button onClick={editNote}>Edit</Button>\n              <Button\n                onClick={tryDeleteNote}\n                unstable_system={{ palette: \"danger\" }}\n              >\n                Delete\n              </Button>\n            </>\n          ) : (\n            <Button onClick={saveNote}>Save</Button>\n          )}\n        </Controls>\n      </Nav>\n      {notEditing ? (\n        <Markdown text={note.body} />\n      ) : (\n        <Input\n          name=\"body\"\n          placeholder=\"Some note body..\"\n          ref={bodyInput}\n          value={editingBody}\n          as={Textarea}\n          // @ts-ignore\n          onChange={(e) => setEditingBody(e.target.value)}\n        />\n      )}\n    </Container>\n  );\n}\n\nexport default Body;\n","import React, { useState } from \"react\";\nimport { styled } from \"linaria/react\";\nimport { useDispatch } from \"react-redux\";\nimport { Switch, Route, useRouteMatch } from \"react-router-dom\";\n\nimport { addNote } from \"./notesSlice\";\nimport ShortcutsInfo from \"./ShortcutsInfo\";\nimport Search from \"./Search\";\nimport Nav from \"./Nav\";\nimport Body from \"./Body\";\n\nconst Section = styled.section`\n  @media (min-width: 767px) {\n    display: flex;\n\n    .left {\n      width: 32%;\n      border-right: 1px solid #006dff;\n      overflow-y: auto;\n    }\n\n    .right {\n      height: calc(100vh - 2.6em);\n      width: 100%;\n      overflow-x: auto;\n    }\n  }\n\n  @media (max-width: 767px) {\n    .left {\n      border-bottom: 1px solid #006dff;\n    }\n  }\n`;\n\nfunction Notes() {\n  const [query, setQuery] = useState(\"\");\n  const { path, url } = useRouteMatch();\n  const dispatch = useDispatch();\n\n  const goAddNote = async (query: string) => {\n    await dispatch(addNote(query));\n    setQuery(\"\");\n  };\n\n  return (\n    <Section>\n      <div className=\"left\">\n        <Search\n          query={query}\n          setQuery={(e) => setQuery(e)}\n          addNote={goAddNote}\n        />\n        <Nav url={url} query={query} />\n      </div>\n\n      <div className=\"right\">\n        <Switch>\n          <Route exact path={path}>\n            <ShortcutsInfo />\n          </Route>\n          <Route path={`${path}/:noteId`}>\n            <Body />\n          </Route>\n        </Switch>\n      </div>\n    </Section>\n  );\n}\n\nexport default Notes;\n"],"sourceRoot":""}