{"version":3,"sources":["../node_modules/refractor/lang/javadoc.js","../node_modules/refractor/lang/javadoclike.js"],"names":["refractorJavadoclike","require","javadoc","Prism","register","codeLines","code","pattern","lookbehind","inside","languages","java","alias","extend","insertBefore","punctuation","namespace","tag","markup","javadoclike","addSupport","module","exports","displayName","aliases","javaDocLike","parameter","keyword","Object","defineProperty","value","docLanguage","forEach","lang","callback","grammar","token","definition","RegExp","Array","isArray","i","l","length","docCommentSupport","rest"],"mappings":"kGACA,IAAIA,EAAuBC,EAAQ,IAInC,SAASC,EAAQC,GACfA,EAAMC,SAASJ,GACd,SAAWG,GACV,IAAIE,EAAY,CACdC,KAAM,CACJC,QAAS,mCACTC,YAAY,EACZC,OAAQN,EAAMO,UAAUC,KACxBC,MAAO,kBAGXT,EAAMO,UAAUR,QAAUC,EAAMO,UAAUG,OAAO,cAAe,IAChEV,EAAMO,UAAUI,aAAa,UAAW,UAAW,CACjD,aAAc,CACZ,CACEP,QAAS,sHACTC,YAAY,EACZC,OAAQ,CACNM,YAAa,OAGjB,CAEER,QAAS,wBACTC,YAAY,EACZC,OAAQ,CACNM,YAAa,WAInBC,UAAW,CACTT,QAAS,+DACTC,YAAY,EACZC,OAAQ,CACNM,YAAa,OAGjB,eAAgB,CACd,CACER,QAAS,8CACTC,YAAY,EACZC,OAAQJ,GAEV,CACEE,QAAS,wCACTC,YAAY,EACZC,OAAQJ,IAGZY,IAAKd,EAAMO,UAAUQ,OAAOD,MAE9Bd,EAAMO,UAAUS,YAAYC,WAAW,OAAQjB,EAAMO,UAAUR,SAjDhE,CAkDEC,GAvDLkB,EAAOC,QAAUpB,EACjBA,EAAQqB,YAAc,UACtBrB,EAAQsB,QAAU,I,gCCClB,SAASL,EAAYhB,IAClB,SAAWA,GACV,IAAIsB,EAAetB,EAAMO,UAAUS,YAAc,CAC/CO,UAAW,CACTnB,QAAS,8DACTC,YAAY,GAEdmB,QAAS,CAGPpB,QAAS,qDACTC,YAAY,GAEdO,YAAa,QAgEfa,OAAOC,eAAeJ,EAAa,aAAc,CAC/CK,MAdF,SAAoBpB,EAAWqB,GACJ,kBAAdrB,IACTA,EAAY,CAACA,IAEfA,EAAUsB,SAAQ,SAAUC,IA/C9B,SAA2BA,EAAMC,GAC/B,IACIC,EAAUhC,EAAMO,UAAUuB,GAC9B,GAAKE,EAAL,CAGA,IAAIC,EAAQD,EALI,eAMhB,IAAKC,EAAO,CAEV,IAAIC,EAAa,CACjBA,cAAwB,CACtB9B,QAAS,wCACTC,YAAY,EACZI,MAAO,YAGTwB,GADAD,EAAUhC,EAAMO,UAAUI,aAAamB,EAAM,UAAWI,IAd1C,eAuBhB,GANID,aAAiBE,SAEnBF,EAAQD,EAnBM,eAmBe,CAC3B5B,QAAS6B,IAGTG,MAAMC,QAAQJ,GAChB,IAAK,IAAIK,EAAI,EAAGC,EAAIN,EAAMO,OAAQF,EAAIC,EAAGD,IACnCL,EAAMK,aAAcH,SACtBF,EAAMK,GAAK,CACTlC,QAAS6B,EAAMK,KAGnBP,EAASE,EAAMK,SAGjBP,EAASE,IAcTQ,CAAkBX,GAAM,SAAU1B,GAC3BA,EAAQE,SACXF,EAAQE,OAAS,IAEnBF,EAAQE,OAAOoC,KAAOd,WAO5BN,EAAYL,WAAW,CAAC,OAAQ,aAAc,OAAQK,GA/EvD,CAgFEtB,GApFLkB,EAAOC,QAAUH,EACjBA,EAAYI,YAAc,cAC1BJ,EAAYK,QAAU","file":"static/js/react-syntax-highlighter_languages_refractor_javadoc.36631cce.chunk.js","sourcesContent":["'use strict'\nvar refractorJavadoclike = require('./javadoclike.js')\nmodule.exports = javadoc\njavadoc.displayName = 'javadoc'\njavadoc.aliases = []\nfunction javadoc(Prism) {\n  Prism.register(refractorJavadoclike)\n  ;(function (Prism) {\n    var codeLines = {\n      code: {\n        pattern: /(^(?:\\s*(?:\\*\\s*)*)).*[^*\\s].+$/m,\n        lookbehind: true,\n        inside: Prism.languages.java,\n        alias: 'language-java'\n      }\n    }\n    Prism.languages.javadoc = Prism.languages.extend('javadoclike', {})\n    Prism.languages.insertBefore('javadoc', 'keyword', {\n      'class-name': [\n        {\n          pattern: /(@(?:exception|throws|see|link|linkplain|value)\\s+(?:[a-z\\d]+\\.)*)[A-Z](?:\\w*[a-z]\\w*)?(?:\\.[A-Z](?:\\w*[a-z]\\w*)?)*/,\n          lookbehind: true,\n          inside: {\n            punctuation: /\\./\n          }\n        },\n        {\n          // @param <T> the first generic type parameter\n          pattern: /(@param\\s+)<[A-Z]\\w*>/,\n          lookbehind: true,\n          inside: {\n            punctuation: /[.<>]/\n          }\n        }\n      ],\n      namespace: {\n        pattern: /(@(?:exception|throws|see|link|linkplain)\\s+)(?:[a-z\\d]+\\.)+/,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\./\n        }\n      },\n      'code-section': [\n        {\n          pattern: /(\\{@code\\s+)(?:[^{}]|\\{[^{}]*\\})+?(?=\\s*\\})/,\n          lookbehind: true,\n          inside: codeLines\n        },\n        {\n          pattern: /(<(code|tt)>\\s*)[\\s\\S]+?(?=\\s*<\\/\\2>)/,\n          lookbehind: true,\n          inside: codeLines\n        }\n      ],\n      tag: Prism.languages.markup.tag\n    })\n    Prism.languages.javadoclike.addSupport('java', Prism.languages.javadoc)\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = javadoclike\njavadoclike.displayName = 'javadoclike'\njavadoclike.aliases = []\nfunction javadoclike(Prism) {\n  ;(function (Prism) {\n    var javaDocLike = (Prism.languages.javadoclike = {\n      parameter: {\n        pattern: /(^\\s*(?:\\/{3}|\\*|\\/\\*\\*)\\s*@(?:param|arg|arguments)\\s+)\\w+/m,\n        lookbehind: true\n      },\n      keyword: {\n        // keywords are the first word in a line preceded be an `@` or surrounded by curly braces.\n        // @word, {@word}\n        pattern: /(^\\s*(?:\\/{3}|\\*|\\/\\*\\*)\\s*|\\{)@[a-z][a-zA-Z-]+\\b/m,\n        lookbehind: true\n      },\n      punctuation: /[{}]/\n    })\n    /**\n     * Adds doc comment support to the given language and calls a given callback on each doc comment pattern.\n     *\n     * @param {string} lang the language add doc comment support to.\n     * @param {(pattern: {inside: {rest: undefined}}) => void} callback the function called with each doc comment pattern as argument.\n     */\n    function docCommentSupport(lang, callback) {\n      var tokenName = 'doc-comment'\n      var grammar = Prism.languages[lang]\n      if (!grammar) {\n        return\n      }\n      var token = grammar[tokenName]\n      if (!token) {\n        // add doc comment: /** */\n        var definition = {}\n        definition[tokenName] = {\n          pattern: /(^|[^\\\\])\\/\\*\\*[^/][\\s\\S]*?(?:\\*\\/|$)/,\n          lookbehind: true,\n          alias: 'comment'\n        }\n        grammar = Prism.languages.insertBefore(lang, 'comment', definition)\n        token = grammar[tokenName]\n      }\n      if (token instanceof RegExp) {\n        // convert regex to object\n        token = grammar[tokenName] = {\n          pattern: token\n        }\n      }\n      if (Array.isArray(token)) {\n        for (var i = 0, l = token.length; i < l; i++) {\n          if (token[i] instanceof RegExp) {\n            token[i] = {\n              pattern: token[i]\n            }\n          }\n          callback(token[i])\n        }\n      } else {\n        callback(token)\n      }\n    }\n    /**\n     * Adds doc-comment support to the given languages for the given documentation language.\n     *\n     * @param {string[]|string} languages\n     * @param {Object} docLanguage\n     */\n    function addSupport(languages, docLanguage) {\n      if (typeof languages === 'string') {\n        languages = [languages]\n      }\n      languages.forEach(function (lang) {\n        docCommentSupport(lang, function (pattern) {\n          if (!pattern.inside) {\n            pattern.inside = {}\n          }\n          pattern.inside.rest = docLanguage\n        })\n      })\n    }\n    Object.defineProperty(javaDocLike, 'addSupport', {\n      value: addSupport\n    })\n    javaDocLike.addSupport(['java', 'javascript', 'php'], javaDocLike)\n  })(Prism)\n}\n"],"sourceRoot":""}