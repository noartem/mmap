{"version":3,"sources":["../node_modules/refractor/lang/regex.js"],"names":["regex","Prism","specialEscape","pattern","alias","escape","charClass","rangeChar","source","range","RegExp","groupName","lookbehind","backreference","inside","languages","charset","charclass","anchor","group","quantifier","alternation","forEach","lang","grammar","module","exports","displayName","aliases"],"mappings":"gGAKA,SAASA,EAAMC,IACZ,SAAWA,GACV,IAAIC,EAAgB,CAClBC,QAAS,uBACTC,MAAO,UAELC,EAAS,6FACTC,EAAY,0BACZC,EAAY,eAAiBF,EAAOG,OAAS,IAC7CC,EAAQC,OAAOH,EAAY,IAAMA,GACjCI,EAAY,CACdR,QAAS,wBACTS,YAAY,EACZR,MAAO,YAELS,EAAgB,CAClB,2BACA,CACEV,QAAS,eACTW,OAAQ,CACN,aAAcH,KAIpBV,EAAMc,UAAUf,MAAQ,CACtBgB,QAAS,CACPb,QAAS,kDACTS,YAAY,EACZE,OAAQ,CACN,mBAAoB,CAClBX,QAAS,UACTS,YAAY,GAEd,sBAAuB,UACvBH,MAAO,CACLN,QAASM,EACTK,OAAQ,CACNT,OAAQA,EACR,oBAAqB,MAGzB,iBAAkBH,EAClBe,UAAWX,EACXO,cAAeA,EACfR,OAAQA,IAGZ,iBAAkBH,EAClBe,UAAWX,EACXO,cAAeA,EACfK,OAAQ,kBACRb,OAAQA,EACRc,MAAO,CACL,CAIEhB,QAAS,8EACTW,OAAQ,CACN,aAAcH,IAGlB,MAEFS,WAAY,yBACZC,YAAa,MAEd,CACC,eACA,cACA,OACA,aACA,aACA,QACAC,SAAQ,SAAUC,GAClB,IAAIC,EAAUvB,EAAMc,UAAUQ,GAC1BC,IACFA,EAAO,MAAUV,OAAS,CACxB,cAAe,UACf,kBAAmB,UACnB,iBAAkB,CAChBX,QAAS,UACTW,OAAQb,EAAMc,UAAUf,YAjFjC,CAsFEC,GA1FLwB,EAAOC,QAAU1B,EACjBA,EAAM2B,YAAc,QACpB3B,EAAM4B,QAAU","file":"static/js/react-syntax-highlighter_languages_refractor_regex.647349b3.chunk.js","sourcesContent":["'use strict'\n\nmodule.exports = regex\nregex.displayName = 'regex'\nregex.aliases = []\nfunction regex(Prism) {\n  ;(function (Prism) {\n    var specialEscape = {\n      pattern: /\\\\[\\\\(){}[\\]^$+*?|.]/,\n      alias: 'escape'\n    }\n    var escape = /\\\\(?:x[\\da-fA-F]{2}|u[\\da-fA-F]{4}|u\\{[\\da-fA-F]+\\}|c[a-zA-Z]|0[0-7]{0,2}|[123][0-7]{2}|.)/\n    var charClass = /\\\\[wsd]|\\.|\\\\p{[^{}]+}/i\n    var rangeChar = '(?:[^\\\\\\\\-]|' + escape.source + ')'\n    var range = RegExp(rangeChar + '-' + rangeChar) // the name of a capturing group\n    var groupName = {\n      pattern: /(<|')[^<>']+(?=[>']$)/,\n      lookbehind: true,\n      alias: 'variable'\n    }\n    var backreference = [\n      /\\\\(?![123][0-7]{2})[1-9]/, // a backreference which is not an octal escape\n      {\n        pattern: /\\\\k<[^<>']+>/,\n        inside: {\n          'group-name': groupName\n        }\n      }\n    ]\n    Prism.languages.regex = {\n      charset: {\n        pattern: /((?:^|[^\\\\])(?:\\\\\\\\)*)\\[(?:[^\\\\\\]]|\\\\[\\s\\S])*\\]/,\n        lookbehind: true,\n        inside: {\n          'charset-negation': {\n            pattern: /(^\\[)\\^/,\n            lookbehind: true\n          },\n          'charset-punctuation': /^\\[|\\]$/,\n          range: {\n            pattern: range,\n            inside: {\n              escape: escape,\n              'range-punctuation': /-/\n            }\n          },\n          'special-escape': specialEscape,\n          charclass: charClass,\n          backreference: backreference,\n          escape: escape\n        }\n      },\n      'special-escape': specialEscape,\n      charclass: charClass,\n      backreference: backreference,\n      anchor: /[$^]|\\\\[ABbGZz]/,\n      escape: escape,\n      group: [\n        {\n          // https://docs.oracle.com/javase/10/docs/api/java/util/regex/Pattern.html\n          // https://docs.microsoft.com/en-us/dotnet/standard/base-types/regular-expression-language-quick-reference?view=netframework-4.7.2#grouping-constructs\n          // (), (?<name>), (?'name'), (?>), (?:), (?=), (?!), (?<=), (?<!), (?is-m), (?i-m:)\n          pattern: /\\((?:\\?(?:<[^<>']+>|'[^<>']+'|[>:]|<?[=!]|[idmnsuxU]+(?:-[idmnsuxU]+)?:?))?/,\n          inside: {\n            'group-name': groupName\n          }\n        },\n        /\\)/\n      ],\n      quantifier: /[+*?]|\\{(?:\\d+,?\\d*)\\}/,\n      alternation: /\\|/\n    }\n    ;[\n      'actionscript',\n      'coffescript',\n      'flow',\n      'javascript',\n      'typescript',\n      'vala'\n    ].forEach(function (lang) {\n      var grammar = Prism.languages[lang]\n      if (grammar) {\n        grammar['regex'].inside = {\n          'regex-flags': /[a-z]+$/,\n          'regex-delimiter': /^\\/|\\/$/,\n          'language-regex': {\n            pattern: /[\\s\\S]+/,\n            inside: Prism.languages.regex\n          }\n        }\n      }\n    })\n  })(Prism)\n}\n"],"sourceRoot":""}