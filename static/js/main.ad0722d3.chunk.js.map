{"version":3,"sources":["features/mmap/mmapSlice.ts","features/mmap/Search.tsx","features/mmap/Nav.tsx","features/mmap/code.tsx","features/mmap/Body.tsx","features/mmap/MMap.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["initialState","ls","localStorage","getItem","search","notes","currentNoteName","JSON","parse","getFromLS","mmapSlice","createSlice","name","reducers","state","searchString","payload","addNote","noteName","undefined","find","note","alert","push","body","selectNote","updateNote","newNote","deleteNote","filter","actions","selectMMap","mmap","selectSearchingNotes","includes","selectCurrentNote","Header","Search","useSelector","dispatch","useDispatch","placeholder","value","onChange","e","goSearch","id","onClick","Navbar","Nav","title","key","Code","children","className","language","style","Main","Body","useState","editingBody","setEditingName","setEditingBody","window","unstable_system","palette","options","overrides","code","component","as","Section","MMap","App","store","configureStore","reducer","mmapReducer","subscribe","setItem","stringify","getState","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","system","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.ad0722d3.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../../app/store\";\nimport { Note } from \"./note\";\n\ninterface MMapState {\n  search: string;\n  notes: Array<Note>;\n  currentNoteName: string;\n}\n\nconst getFromLS = () => {\n  const ls = localStorage.getItem(\"mmap-store\");\n  return ls === \"\" || ls === null\n    ? {\n        search: \"\",\n        notes: [],\n        currentNoteName: \"\",\n      }\n    : JSON.parse(ls);\n};\n\nconst initialState: MMapState = getFromLS();\n\nexport const mmapSlice = createSlice({\n  name: \"mmap\",\n  initialState,\n  reducers: {\n    search: (state, searchString: PayloadAction<string>) => {\n      state.search = searchString.payload;\n    },\n    addNote: (state, noteName: PayloadAction<string>) => {\n      if (\n        state.notes.find((note) => note.name === noteName.payload) !== undefined\n      ) {\n        alert(\"Note with this name already exist!\");\n      } else {\n        state.notes.push({\n          name: noteName.payload,\n          body: \"...\",\n        });\n        state.search = \"\";\n      }\n    },\n    selectNote: (state, noteName: PayloadAction<string>) => {\n      state.currentNoteName = noteName.payload;\n    },\n    updateNote: (state, newNote: PayloadAction<Note>) => {\n      for (const note of state.notes) {\n        if (note.name === state.currentNoteName) {\n          note.name = newNote.payload.name;\n          note.body = newNote.payload.body;\n          state.currentNoteName = note.name;\n          break;\n        }\n      }\n    },\n    deleteNote: (state) => {\n      state.notes = state.notes.filter(\n        (note) => note.name !== state.currentNoteName\n      );\n      state.currentNoteName = \"\";\n    },\n  },\n});\n\nexport const {\n  search,\n  addNote,\n  selectNote,\n  updateNote,\n  deleteNote,\n} = mmapSlice.actions;\n\nexport const selectMMap = (state: RootState) => state.mmap;\n\nexport const selectSearchingNotes = (state: RootState) =>\n  state.mmap.notes.filter((note) => note.name.includes(state.mmap.search));\n\nexport const selectCurrentNote = (state: RootState) =>\n  state.mmap.notes.find((note) => note.name === state.mmap.currentNoteName);\n\nexport default mmapSlice.reducer;\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { search as goSearch, addNote, selectMMap } from \"./mmapSlice\";\nimport { Button } from \"reakit/Button\";\nimport { Input } from \"reakit/Input\";\nimport { styled } from \"linaria/react\";\n\nconst Header = styled.header`\n  display: flex;\n  padding: 0.5em 0.75em;\n\n  input {\n    border: none;\n    margin: 0 0.5em 0 0 !important;\n  }\n\n  svg {\n    margin: auto 0;\n  }\n\n  span {\n    display: flex;\n  }\n`;\n\nexport function Search() {\n  const { search } = useSelector(selectMMap);\n  const dispatch = useDispatch();\n\n  return (\n    <Header>\n      <Input\n        name=\"search\"\n        placeholder=\"Search...\"\n        value={search}\n        onChange={(e) => dispatch(goSearch(e.target.value))}\n      />\n      {search === \"\" ? (\n        <div id=\"empty\" />\n      ) : (\n        <Button onClick={() => dispatch(addNote(search))}>Add</Button>\n      )}\n    </Header>\n  );\n}\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { selectSearchingNotes, selectNote } from \"./mmapSlice\";\nimport { styled } from \"linaria/react\";\nimport { Clickable } from \"reakit/Clickable\";\n\nconst Navbar = styled.nav`\n  width: 32%;\n  border-right: 1px solid rgba(0, 0, 0, 0.25);\n  overflow-y: auto;\n  background: #f8f9fa !important;\n\n  ul {\n    margin: 0;\n    padding: 0;\n\n    li {\n      list-style: none;\n\n      button {\n        padding: 0.5em 0.75em;\n        overflow: hidden;\n        text-overflow: ellipsis;\n        border: none;\n        background: inherit;\n        width: 100%;\n        text-align: left;\n        cursor: pointer;\n        font-size: 16px;\n\n        transition: 0.4s;\n\n        &:focus,\n        &:hover,\n        &:active {\n          background: #006dff;\n          color: white;\n        }\n      }\n    }\n  }\n`;\n\nexport function Nav() {\n  const notes = useSelector(selectSearchingNotes);\n  const dispatch = useDispatch();\n\n  return (\n    <Navbar>\n      <ul>\n        {notes.map((note) => (\n          <li title={note.name} key={note.name}>\n            <Clickable onClick={() => dispatch(selectNote(note.name))}>\n              {note.name}\n            </Clickable>\n          </li>\n        ))}\n      </ul>\n    </Navbar>\n  );\n}\n","import React from \"react\";\nimport { css } from \"linaria\";\n\nimport { PrismAsyncLight as SyntaxHighlighter } from \"react-syntax-highlighter\";\nimport { ghcolors as theme } from \"react-syntax-highlighter/dist/esm/styles/prism\";\n\ninterface IProps {\n  className: string;\n  children: React.ReactChildren;\n}\n\nconst stylesClass = css`\n  padding: 0;\n  font-size: 1.5em;\n  line-height: 1.5;\n  background: none;\n  border: none;\n`;\n\nexport const Code = ({ className, children }: IProps) => (\n  <SyntaxHighlighter\n    className={stylesClass}\n    language={\n      className === \"\" || className === undefined ? \"\" : className.split(\"-\")[1]\n    }\n    style={theme}\n    children={children}\n  />\n);\n","import React, { useState, Fragment } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { styled } from \"linaria/react\";\nimport Markdown from \"markdown-to-jsx\";\nimport { Button } from \"reakit/Button\";\nimport { Input } from \"reakit/Input\";\n\nimport { updateNote, deleteNote } from \"./mmapSlice\";\nimport { Note } from \"./note\";\nimport { Code } from \"./code\";\n\nconst Main = styled.main`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n\n  textarea {\n    width: 100%;\n    height: 100%;\n    border: none;\n  }\n\n  #body_content {\n    overflow: auto;\n  }\n\n  #body_content,\n  textarea,\n  nav {\n    padding: 0.5em 0.75em;\n  }\n\n  nav {\n    border-bottom: 1px solid rgba(0, 0, 0, 0.25);\n    display: flex;\n\n    h1 {\n      margin: auto 0;\n    }\n\n    .controls {\n      margin-left: auto;\n      display: flex;\n\n      button {\n        margin-left: 0.5em;\n      }\n\n      /* button.btn-danger {\n        background: #dc3545;\n\n        &:hover {\n          background-color: #c82333;\n          border-color: #bd2130;\n        }\n      } */\n    }\n  }\n`;\n\ninterface IProps {\n  note: Note;\n}\n\nexport function Body({ note }: IProps) {\n  const dispatch = useDispatch();\n  const [editingBody, setEditingBody] = useState(\"\");\n  const [editingName, setEditingName] = useState(\"\");\n\n  const editNote = () => {\n    setEditingName(note.name);\n    setEditingBody(note.body);\n  };\n\n  const saveNote = () => {\n    dispatch(updateNote({ name: editingName, body: editingBody }));\n    setEditingName(\"\");\n    setEditingBody(\"\");\n  };\n\n  const tryDeleteNote = () => {\n    if (window.confirm(\"Are you sure?\")) dispatch(deleteNote());\n  };\n\n  return (\n    <Main>\n      <nav>\n        {editingBody === \"\" ? (\n          <h1>{note.name}</h1>\n        ) : (\n          <Input\n            value={editingName}\n            onChange={(e) => setEditingName(e.target.value)}\n          />\n        )}\n\n        <div className=\"controls\">\n          {editingBody === \"\" ? (\n            <Fragment>\n              <Button onClick={editNote}>Edit</Button>\n              <Button\n                onClick={tryDeleteNote}\n                unstable_system={{ palette: \"danger\" }}\n              >\n                Delete\n              </Button>\n            </Fragment>\n          ) : (\n            <Button onClick={saveNote}>Save</Button>\n          )}\n        </div>\n      </nav>\n      {editingBody === \"\" ? (\n        <div id=\"body_content\" className=\"markdown-body\">\n          <Markdown\n            children={note.body}\n            options={{\n              overrides: {\n                code: {\n                  component: Code,\n                },\n              },\n            }}\n          />\n        </div>\n      ) : (\n        <Input\n          value={editingBody}\n          as=\"textarea\"\n          // @ts-ignore\n          onChange={(e) => setEditingBody(e.target.value)}\n        />\n      )}\n    </Main>\n  );\n}\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectCurrentNote } from \"./mmapSlice\";\nimport { Search } from \"./Search\";\nimport { Nav } from \"./Nav\";\nimport { Body } from \"./Body\";\nimport { styled } from \"linaria/react\";\n\nconst Section = styled.section`\n  #mmap-body {\n    display: flex;\n    height: calc(100vh - 52px);\n    width: 100%;\n    border-top: 1px solid rgba(0, 0, 0, 0.25);\n\n    #empty_body {\n      width: 100%;\n    }\n  }\n`;\n\nexport function MMap() {\n  const note = useSelector(selectCurrentNote);\n\n  return (\n    <Section>\n      <Search />\n      <div id=\"mmap-body\">\n        <Nav />\n        {note ? <Body note={note} /> : <div id=\"empty_body\" />}\n      </div>\n    </Section>\n  );\n}\n","import React from \"react\";\r\nimport { MMap } from \"./features/mmap/MMap\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <MMap />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore, ThunkAction, Action } from \"@reduxjs/toolkit\";\r\nimport mmapReducer from \"../features/mmap/mmapSlice\";\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    mmap: mmapReducer,\r\n  },\r\n});\r\n\r\nstore.subscribe(() =>\r\n  localStorage.setItem(\"mmap-store\", JSON.stringify(store.getState().mmap))\r\n);\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport { store } from \"./app/store\";\r\nimport { Provider as ReduxProvider } from \"react-redux\";\r\nimport { Provider as ReakitProvider } from \"reakit\";\r\nimport * as system from \"reakit-system-bootstrap\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ReduxProvider store={store}>\r\n      <ReakitProvider unstable_system={system}>\r\n        <App />\r\n      </ReakitProvider>\r\n    </ReduxProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}