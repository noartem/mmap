{"version":3,"sources":["utils/useShortcut.ts","features/notes/notesSlice.ts","features/board/boardSlice.ts","App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["useShortcut","keys","cbk","deps","action","callback","useCallback","useEffect","Mousetrap","bind","unbind","notesSlice","createSlice","name","initialState","query","notes","reducers","search","state","searchString","payload","addNote","noteName","newNote","id","nanoid","body","push","updateNote","note","deleteNote","noteId","filter","actions","selectNotesQuery","selectSearchingNotes","includes","selectNote","find","boardSlice","cards","moreCards","tags","oneMoreCard","columns","todo","cardsIds","inProgress","done","columnOrder","background","addColumn","columnName","column","editColumn","columnId","newName","moveColumn","oldIndex","newIndex","length","splice","deleteColumn","indexOf","addCard","cardName","card","editCard","newCard","moveCard","cardId","moveCardToColumn","oldColumnId","newColumnId","cardNewIndex","oldColumn","newColumn","cardOldIndex","tempAddCard","deleteCard","fromCards","selectBoard","board","selectColumn","selectCard","Notes","lazy","Board","history","useHistory","className","to","size","fallback","path","render","store","configureStore","reducer","notesReducer","boardReducer","ls","localStorage","getItem","preloadedState","JSON","parse","optionalPreloadedState","subscribe","setItem","stringify","getState","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","StrictMode","unstable_system","system","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.eb255756.chunk.js","sourcesContent":["import { useEffect, useCallback } from \"react\";\nimport Mousetrap from \"mousetrap\";\n\nexport function useShortcut(\n  keys: string | string[],\n  cbk: (e: ExtendedKeyboardEvent, combo: string) => any,\n  deps?: any[],\n  action?: string\n) {\n  const callback = useCallback(cbk, deps || []);\n\n  useEffect(() => {\n    Mousetrap.bind(keys, callback, action);\n\n    return () => {\n      Mousetrap.unbind(keys);\n    };\n  }, [keys, callback, action]);\n}\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { nanoid } from \"nanoid\";\n\nimport { RootState } from \"../../app/store\";\nimport { Note } from \"./note\";\n\ninterface NotesState {\n  query: string;\n  notes: Array<Note>;\n}\n\nconst initialState: NotesState = {\n  query: \"\",\n  notes: [],\n};\n\nexport const notesSlice = createSlice({\n  name: \"notes\",\n  initialState,\n  reducers: {\n    search: (state, searchString: PayloadAction<string>) => {\n      state.query = searchString.payload;\n    },\n    addNote: (state, noteName: PayloadAction<string>) => {\n      const newNote = {\n        id: nanoid(8),\n        name: noteName.payload,\n        body: `# ${noteName.payload}!\\n\\nSome *text* goes here...`,\n      };\n\n      state.notes.push(newNote);\n      state.query = \"\";\n    },\n    updateNote: (state, newNote: PayloadAction<Note>) => {\n      for (const note of state.notes) {\n        if (note.id === newNote.payload.id) {\n          note.id = newNote.payload.id;\n          note.name = newNote.payload.name;\n          note.body = newNote.payload.body;\n          break;\n        }\n      }\n    },\n    deleteNote: (state, noteId: PayloadAction<string>) => {\n      state.notes = state.notes.filter((note) => note.id !== noteId.payload);\n    },\n  },\n});\n\nexport const { search, addNote, updateNote, deleteNote } = notesSlice.actions;\n\nexport const selectNotesQuery = (state: RootState) => state.notes.query;\n\nexport const selectSearchingNotes = (state: RootState) =>\n  state.notes.notes.filter((note) => note.name.includes(state.notes.query));\n\nexport const selectNote = (noteId: string) => (state: RootState) =>\n  state.notes.notes.find((note) => note.id === noteId);\n\nexport default notesSlice.reducer;\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\nimport { RootState } from \"../../app/store\";\nimport { Columns, Card, Cards } from \"./column\";\nimport { nanoid } from \"nanoid\";\n\ninterface BoardState {\n  cards: Cards;\n  columns: Columns;\n  columnOrder: string[];\n  background: string;\n}\n\nconst initialState: BoardState = {\n  cards: {\n    moreCards: {\n      id: \"moreCards\",\n      name: \"Add more cards\",\n      body: \"# Add more cards \\n\\n ---\",\n      tags: [],\n    },\n    oneMoreCard: {\n      id: \"oneMoreCard\",\n      name: \"One more card\",\n      body: \"# 11111 \\n\\n ---\",\n      tags: [],\n    },\n  },\n  columns: {\n    todo: { id: \"todo\", name: \"TODO\", cardsIds: [\"moreCards\", \"oneMoreCard\"] },\n    inProgress: { id: \"inProgress\", name: \"IN PROGRESS\", cardsIds: [] },\n    done: { id: \"done\", name: \"DONE\", cardsIds: [] },\n  },\n  columnOrder: [\"todo\", \"inProgress\", \"done\"],\n  background: \"#00CC99\",\n};\n\nexport const boardSlice = createSlice({\n  name: \"board\",\n  initialState,\n  reducers: {\n    addColumn(state, columnName: PayloadAction<string>) {\n      const column = {\n        id: nanoid(),\n        name: columnName.payload,\n        cardsIds: [],\n      };\n\n      state.columns[column.id] = column;\n      state.columnOrder.push(column.id);\n    },\n    editColumn(\n      state,\n      {\n        payload: { columnId, newName },\n      }: PayloadAction<{ columnId: string; newName: string }>\n    ) {\n      if (state.columns[columnId]) {\n        state.columns[columnId].name = newName;\n      }\n    },\n    moveColumn(\n      state,\n      {\n        payload: { oldIndex, newIndex },\n      }: PayloadAction<{ oldIndex: number; newIndex: number }>\n    ) {\n      if (state.columnOrder.length <= oldIndex) return;\n\n      const columnId = state.columnOrder[oldIndex];\n\n      state.columnOrder.splice(oldIndex, 1); // remove\n      state.columnOrder.splice(newIndex, 0, columnId); // add\n    },\n    deleteColumn(state, columnId: PayloadAction<string>) {\n      state.columnOrder.splice(state.columnOrder.indexOf(columnId.payload), 1);\n      delete state.columns[columnId.payload];\n    },\n    addCard(\n      state,\n      {\n        payload: { cardName, columnId },\n      }: PayloadAction<{ cardName: string; columnId: string }>\n    ) {\n      const column = state.columns[columnId];\n\n      if (column) {\n        const card = {\n          id: nanoid(),\n          name: cardName,\n          body: \"\",\n          tags: [],\n        };\n\n        state.cards[card.id] = card;\n        column.cardsIds.push(card.id);\n      }\n    },\n    editCard(state, newCard: PayloadAction<Card>) {\n      const card = state.cards[newCard.payload.id];\n\n      if (card) {\n        card.name = newCard.payload.name;\n        card.body = newCard.payload.body;\n        card.tags = newCard.payload.tags;\n      }\n    },\n    moveCard(\n      state,\n      {\n        payload: { columnId, cardId, newIndex },\n      }: PayloadAction<{\n        columnId: string;\n        cardId: string;\n        newIndex: number;\n      }>\n    ) {\n      const column = state.columns[columnId];\n\n      if (column) {\n        const oldIndex = column.cardsIds.indexOf(cardId);\n\n        if (oldIndex !== -1) {\n          column.cardsIds.splice(oldIndex, 1);\n          column.cardsIds.splice(newIndex, 0, cardId);\n        }\n      }\n    },\n    moveCardToColumn(\n      state,\n      {\n        payload: { oldColumnId, newColumnId, cardId, cardNewIndex },\n      }: PayloadAction<{\n        oldColumnId: string;\n        newColumnId: string;\n        cardId: string;\n        cardNewIndex: number;\n      }>\n    ) {\n      const oldColumn = state.columns[oldColumnId];\n      const newColumn = state.columns[newColumnId];\n\n      if (oldColumn && newColumn) {\n        const cardOldIndex = oldColumn.cardsIds.indexOf(cardId);\n\n        if (cardOldIndex !== -1) {\n          oldColumn.cardsIds.splice(cardOldIndex, 1);\n          newColumn.cardsIds.splice(cardNewIndex, 0, cardId);\n        }\n      }\n    },\n    tempAddCard(\n      state,\n      {\n        payload: { cardId, columnId, newIndex },\n      }: PayloadAction<{\n        cardId: string;\n        columnId: string;\n        newIndex: number;\n      }>\n    ) {\n      const column = state.columns[columnId];\n      const card = state.cards[cardId];\n\n      if (column && card) {\n        column.cardsIds.splice(newIndex, 0, cardId);\n      }\n    },\n    deleteCard(\n      state,\n      {\n        payload: { cardId, columnId, fromCards },\n      }: PayloadAction<{\n        cardId: string;\n        columnId: string;\n        fromCards: boolean;\n      }>\n    ) {\n      const column = state.columns[columnId];\n      const card = state.cards[cardId];\n\n      if (column && card) {\n        if (fromCards) delete state.cards[cardId];\n        column.cardsIds.splice(column.cardsIds.indexOf(cardId), 1);\n      }\n    },\n  },\n});\n\nexport const {\n  addColumn,\n  editColumn,\n  moveColumn,\n  addCard,\n  editCard,\n  moveCard,\n  tempAddCard,\n  deleteCard,\n} = boardSlice.actions;\n\nexport const selectBoard = (state: RootState) => state.board;\n\nexport const selectColumn = (columnId: string) => (state: RootState) =>\n  state.board.columns[columnId];\n\nexport const selectCard = (cardId: string) => (state: RootState) =>\n  state.board.cards[cardId];\n\nexport default boardSlice.reducer;\n","import React, { Suspense, lazy } from \"react\";\r\nimport { Switch, Route, Link, useHistory } from \"react-router-dom\";\r\nimport { css } from \"linaria\";\r\nimport { BookIcon } from \"@primer/octicons-react\";\r\nimport { useShortcut } from \"./utils\";\r\n\r\nconst Notes = lazy(() => import(\"./features/notes/Notes\"));\r\nconst Board = lazy(() => import(\"./features/board/Board\"));\r\n\r\nconst stylesClass = css`\r\n  nav.routes {\r\n    display: flex;\r\n    padding: 0 0.75em 0 0;\r\n    border-bottom: 1px solid #006dff;\r\n    overflow-y: auto;\r\n    background: #f8f9fa !important;\r\n\r\n    a {\r\n      color: #006dff;\r\n      text-decoration: none;\r\n\r\n      &:focus,\r\n      &:hover,\r\n      &:visited {\r\n        color: #006dff;\r\n      }\r\n    }\r\n\r\n    .logo {\r\n      font-size: 1.17em;\r\n      background: #006dff;\r\n      margin: 0;\r\n      padding: 0.4em 0.8em 0.3em 0.8em;\r\n      a {\r\n        color: white !important;\r\n        display: flex;\r\n      }\r\n    }\r\n\r\n    ul {\r\n      display: flex;\r\n\r\n      list-style: none;\r\n      margin: auto 0.75em;\r\n      padding: 0;\r\n\r\n      li {\r\n        margin: 0;\r\n        padding: 0.5em 0.75em;\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nfunction App() {\r\n  const history = useHistory();\r\n\r\n  useShortcut(\"ctrl+shift+1\", () => history.push(\"/notes\"));\r\n  useShortcut(\"ctrl+shift+2\", () => history.push(\"/board\"));\r\n\r\n  return (\r\n    <div className={stylesClass}>\r\n      <nav className=\"routes\">\r\n        <div className=\"logo\">\r\n          <Link to=\"/\">\r\n            <BookIcon size={28} />\r\n          </Link>\r\n        </div>\r\n        <ul>\r\n          <li>\r\n            <Link to=\"/notes\">Notes</Link>\r\n          </li>\r\n          <li>\r\n            <Link to=\"/board\">Board</Link>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n\r\n      <main>\r\n        <Suspense fallback={<p>Loading...</p>}>\r\n          <Switch>\r\n            <Route path=\"/notes\" render={() => <Notes />} />\r\n            <Route path=\"/board\" render={() => <Board />} />\r\n          </Switch>\r\n        </Suspense>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore, ThunkAction, Action } from \"@reduxjs/toolkit\";\r\nimport notesReducer from \"../features/notes/notesSlice\";\r\nimport boardReducer from \"../features/board/boardSlice\";\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    notes: notesReducer,\r\n    board: boardReducer,\r\n  },\r\n  ...optionalPreloadedState(),\r\n});\r\n\r\nfunction optionalPreloadedState() {\r\n  const ls = localStorage.getItem(\"redux-store\");\r\n  return ls === \"\" || ls === null ? {} : { preloadedState: JSON.parse(ls) };\r\n}\r\n\r\nstore.subscribe(() =>\r\n  localStorage.setItem(\"redux-store\", JSON.stringify(store.getState()))\r\n);\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport { store } from \"./app/store\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport { Provider as ReduxProvider } from \"react-redux\";\r\nimport { Provider as ReakitProvider } from \"reakit\";\r\nimport * as system from \"reakit-system-bootstrap\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ReduxProvider store={store}>\r\n      <ReakitProvider unstable_system={system}>\r\n        <Router>\r\n          <App />\r\n        </Router>\r\n      </ReakitProvider>\r\n    </ReduxProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}