{"version":3,"sources":["../node_modules/refractor/lang/latte.js","../node_modules/refractor/lang/markup-templating.js"],"names":["refractorMarkupTemplating","require","latte","Prism","register","languages","comment","ld","pattern","inside","punctuation","tag","alias","rd","php","markupLatte","extend","insertBefore","lookbehind","hooks","add","env","language","buildPlaceholders","grammar","tokenizePlaceholders","module","exports","displayName","aliases","markupTemplating","getPlaceholder","index","toUpperCase","Object","defineProperties","value","placeholderPattern","replaceFilter","tokenStack","code","replace","match","placeholder","i","length","indexOf","markup","j","keys","walkTokens","tokens","token","content","k","t","s","before","substring","middle","Token","tokenize","after","replacement","push","apply","splice","concat"],"mappings":"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","file":"static/js/react-syntax-highlighter_languages_refractor_latte.f96bfbf8.chunk.js","sourcesContent":["'use strict'\nvar refractorMarkupTemplating = require('./markup-templating.js')\nmodule.exports = latte\nlatte.displayName = 'latte'\nlatte.aliases = []\nfunction latte(Prism) {\n  Prism.register(refractorMarkupTemplating)\n  ;(function (Prism) {\n    Prism.languages.latte = {\n      comment: /^\\{\\*[\\s\\S]*/,\n      ld: {\n        pattern: /^\\{(?:[=_]|\\/?(?!\\d|\\w+\\()\\w+|)/,\n        inside: {\n          punctuation: /^\\{\\/?/,\n          tag: {\n            pattern: /.+/,\n            alias: 'important'\n          }\n        }\n      },\n      rd: {\n        pattern: /\\}$/,\n        inside: {\n          punctuation: /.+/\n        }\n      },\n      php: {\n        pattern: /\\S(?:[\\s\\S]*\\S)?/,\n        alias: 'language-php',\n        inside: Prism.languages.php\n      }\n    }\n    var markupLatte = Prism.languages.extend('markup', {})\n    Prism.languages.insertBefore(\n      'inside',\n      'attr-value',\n      {\n        'n-attr': {\n          pattern: /n:[\\w-]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+))?/,\n          inside: {\n            'attr-name': {\n              pattern: /^[^\\s=]+/,\n              alias: 'important'\n            },\n            'attr-value': {\n              pattern: /=[\\s\\S]+/,\n              inside: {\n                punctuation: [\n                  /^=/,\n                  {\n                    pattern: /^(\\s*)[\"']|[\"']$/,\n                    lookbehind: true\n                  }\n                ],\n                php: {\n                  pattern: /\\S(?:[\\s\\S]*\\S)?/,\n                  inside: Prism.languages.php\n                }\n              }\n            }\n          }\n        }\n      },\n      markupLatte.tag\n    )\n    Prism.hooks.add('before-tokenize', function (env) {\n      if (env.language !== 'latte') {\n        return\n      }\n      var lattePattern = /\\{\\*[\\s\\S]*?\\*\\}|\\{[^'\"\\s{}*](?:[^\"'/{}]|\\/(?![*/])|(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|\\/\\*[\\s\\S]*?\\*\\/)*?\\}/g\n      Prism.languages['markup-templating'].buildPlaceholders(\n        env,\n        'latte',\n        lattePattern\n      )\n      env.grammar = markupLatte\n    })\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'latte')\n    })\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = markupTemplating\nmarkupTemplating.displayName = 'markupTemplating'\nmarkupTemplating.aliases = []\nfunction markupTemplating(Prism) {\n  ;(function (Prism) {\n    /**\n     * Returns the placeholder for the given language id and index.\n     *\n     * @param {string} language\n     * @param {string|number} index\n     * @returns {string}\n     */\n    function getPlaceholder(language, index) {\n      return '___' + language.toUpperCase() + index + '___'\n    }\n    Object.defineProperties((Prism.languages['markup-templating'] = {}), {\n      buildPlaceholders: {\n        /**\n         * Tokenize all inline templating expressions matching `placeholderPattern`.\n         *\n         * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns\n         * `true` will be replaced.\n         *\n         * @param {object} env The environment of the `before-tokenize` hook.\n         * @param {string} language The language id.\n         * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.\n         * @param {(match: string) => boolean} [replaceFilter]\n         */\n        value: function (env, language, placeholderPattern, replaceFilter) {\n          if (env.language !== language) {\n            return\n          }\n          var tokenStack = (env.tokenStack = [])\n          env.code = env.code.replace(placeholderPattern, function (match) {\n            if (typeof replaceFilter === 'function' && !replaceFilter(match)) {\n              return match\n            }\n            var i = tokenStack.length\n            var placeholder // Check for existing strings\n            while (\n              env.code.indexOf((placeholder = getPlaceholder(language, i))) !==\n              -1\n            )\n              ++i // Create a sparse array\n            tokenStack[i] = match\n            return placeholder\n          }) // Switch the grammar to markup\n          env.grammar = Prism.languages.markup\n        }\n      },\n      tokenizePlaceholders: {\n        /**\n         * Replace placeholders with proper tokens after tokenizing.\n         *\n         * @param {object} env The environment of the `after-tokenize` hook.\n         * @param {string} language The language id.\n         */\n        value: function (env, language) {\n          if (env.language !== language || !env.tokenStack) {\n            return\n          } // Switch the grammar back\n          env.grammar = Prism.languages[language]\n          var j = 0\n          var keys = Object.keys(env.tokenStack)\n          function walkTokens(tokens) {\n            for (var i = 0; i < tokens.length; i++) {\n              // all placeholders are replaced already\n              if (j >= keys.length) {\n                break\n              }\n              var token = tokens[i]\n              if (\n                typeof token === 'string' ||\n                (token.content && typeof token.content === 'string')\n              ) {\n                var k = keys[j]\n                var t = env.tokenStack[k]\n                var s = typeof token === 'string' ? token : token.content\n                var placeholder = getPlaceholder(language, k)\n                var index = s.indexOf(placeholder)\n                if (index > -1) {\n                  ++j\n                  var before = s.substring(0, index)\n                  var middle = new Prism.Token(\n                    language,\n                    Prism.tokenize(t, env.grammar),\n                    'language-' + language,\n                    t\n                  )\n                  var after = s.substring(index + placeholder.length)\n                  var replacement = []\n                  if (before) {\n                    replacement.push.apply(replacement, walkTokens([before]))\n                  }\n                  replacement.push(middle)\n                  if (after) {\n                    replacement.push.apply(replacement, walkTokens([after]))\n                  }\n                  if (typeof token === 'string') {\n                    tokens.splice.apply(tokens, [i, 1].concat(replacement))\n                  } else {\n                    token.content = replacement\n                  }\n                }\n              } else if (\n                token.content\n                /* && typeof token.content !== 'string' */\n              ) {\n                walkTokens(token.content)\n              }\n            }\n            return tokens\n          }\n          walkTokens(env.tokens)\n        }\n      }\n    })\n  })(Prism)\n}\n"],"sourceRoot":""}